// Code generated by "enumer -type Connector -transform snake -trimprefix Connector -linecomment -text"; DO NOT EDIT.

package cache

import (
	"fmt"
	"strings"
)

const _ConnectorName = "memorypostgresredis"

var _ConnectorIndex = [...]uint8{0, 0, 6, 14, 19}

const _ConnectorLowerName = "memorypostgresredis"

func (i Connector) String() string {
	if i < 0 || i >= Connector(len(_ConnectorIndex)-1) {
		return fmt.Sprintf("Connector(%d)", i)
	}
	return _ConnectorName[_ConnectorIndex[i]:_ConnectorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConnectorNoOp() {
	var x [1]struct{}
	_ = x[ConnectorUnspecified-(0)]
	_ = x[ConnectorMemory-(1)]
	_ = x[ConnectorPostgres-(2)]
	_ = x[ConnectorRedis-(3)]
}

var _ConnectorValues = []Connector{ConnectorUnspecified, ConnectorMemory, ConnectorPostgres, ConnectorRedis}

var _ConnectorNameToValueMap = map[string]Connector{
	_ConnectorName[0:0]:        ConnectorUnspecified,
	_ConnectorLowerName[0:0]:   ConnectorUnspecified,
	_ConnectorName[0:6]:        ConnectorMemory,
	_ConnectorLowerName[0:6]:   ConnectorMemory,
	_ConnectorName[6:14]:       ConnectorPostgres,
	_ConnectorLowerName[6:14]:  ConnectorPostgres,
	_ConnectorName[14:19]:      ConnectorRedis,
	_ConnectorLowerName[14:19]: ConnectorRedis,
}

var _ConnectorNames = []string{
	_ConnectorName[0:0],
	_ConnectorName[0:6],
	_ConnectorName[6:14],
	_ConnectorName[14:19],
}

// ConnectorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConnectorString(s string) (Connector, error) {
	if val, ok := _ConnectorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConnectorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Connector values", s)
}

// ConnectorValues returns all values of the enum
func ConnectorValues() []Connector {
	return _ConnectorValues
}

// ConnectorStrings returns a slice of all String values of the enum
func ConnectorStrings() []string {
	strs := make([]string, len(_ConnectorNames))
	copy(strs, _ConnectorNames)
	return strs
}

// IsAConnector returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Connector) IsAConnector() bool {
	for _, v := range _ConnectorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Connector
func (i Connector) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Connector
func (i *Connector) UnmarshalText(text []byte) error {
	var err error
	*i, err = ConnectorString(string(text))
	return err
}
