// Code generated by "enumer -type OwnerType -transform snake -trimprefix OwnerType -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _OwnerTypeName = "unspecifiedsysteminstanceorganization"

var _OwnerTypeIndex = [...]uint8{0, 11, 17, 25, 37}

const _OwnerTypeLowerName = "unspecifiedsysteminstanceorganization"

func (i OwnerType) String() string {
	if i >= OwnerType(len(_OwnerTypeIndex)-1) {
		return fmt.Sprintf("OwnerType(%d)", i)
	}
	return _OwnerTypeName[_OwnerTypeIndex[i]:_OwnerTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OwnerTypeNoOp() {
	var x [1]struct{}
	_ = x[OwnerTypeUnspecified-(0)]
	_ = x[OwnerTypeSystem-(1)]
	_ = x[OwnerTypeInstance-(2)]
	_ = x[OwnerTypeOrganization-(3)]
}

var _OwnerTypeValues = []OwnerType{OwnerTypeUnspecified, OwnerTypeSystem, OwnerTypeInstance, OwnerTypeOrganization}

var _OwnerTypeNameToValueMap = map[string]OwnerType{
	_OwnerTypeName[0:11]:       OwnerTypeUnspecified,
	_OwnerTypeLowerName[0:11]:  OwnerTypeUnspecified,
	_OwnerTypeName[11:17]:      OwnerTypeSystem,
	_OwnerTypeLowerName[11:17]: OwnerTypeSystem,
	_OwnerTypeName[17:25]:      OwnerTypeInstance,
	_OwnerTypeLowerName[17:25]: OwnerTypeInstance,
	_OwnerTypeName[25:37]:      OwnerTypeOrganization,
	_OwnerTypeLowerName[25:37]: OwnerTypeOrganization,
}

var _OwnerTypeNames = []string{
	_OwnerTypeName[0:11],
	_OwnerTypeName[11:17],
	_OwnerTypeName[17:25],
	_OwnerTypeName[25:37],
}

// OwnerTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OwnerTypeString(s string) (OwnerType, error) {
	if val, ok := _OwnerTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OwnerTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OwnerType values", s)
}

// OwnerTypeValues returns all values of the enum
func OwnerTypeValues() []OwnerType {
	return _OwnerTypeValues
}

// OwnerTypeStrings returns a slice of all String values of the enum
func OwnerTypeStrings() []string {
	strs := make([]string, len(_OwnerTypeNames))
	copy(strs, _OwnerTypeNames)
	return strs
}

// IsAOwnerType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OwnerType) IsAOwnerType() bool {
	for _, v := range _OwnerTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i OwnerType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *OwnerType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of OwnerType: %[1]T(%[1]v)", value)
	}

	val, err := OwnerTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
