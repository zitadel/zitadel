// Code generated by "enumer -type IDPType -transform lower -trimprefix IDPType"; DO NOT EDIT.

package domain

import (
	"fmt"
	"strings"
)

const _IDPTypeName = "oidcjwtoauthsamlldapgithubgithubenterprisegitlabgitlabselfhostedazuregoogleapple"

var _IDPTypeIndex = [...]uint8{0, 4, 7, 12, 16, 20, 26, 42, 48, 64, 69, 75, 80}

const _IDPTypeLowerName = "oidcjwtoauthsamlldapgithubgithubenterprisegitlabgitlabselfhostedazuregoogleapple"

func (i IDPType) String() string {
	i -= 1
	if i >= IDPType(len(_IDPTypeIndex)-1) {
		return fmt.Sprintf("IDPType(%d)", i+1)
	}
	return _IDPTypeName[_IDPTypeIndex[i]:_IDPTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _IDPTypeNoOp() {
	var x [1]struct{}
	_ = x[IDPTypeOIDC-(1)]
	_ = x[IDPTypeJWT-(2)]
	_ = x[IDPTypeOAuth-(3)]
	_ = x[IDPTypeSAML-(4)]
	_ = x[IDPTypeLDAP-(5)]
	_ = x[IDPTypeGitHub-(6)]
	_ = x[IDPTypeGitHubEnterprise-(7)]
	_ = x[IDPTypeGitLab-(8)]
	_ = x[IDPTypeGitLabSelfHosted-(9)]
	_ = x[IDPTypeAzure-(10)]
	_ = x[IDPTypeGoogle-(11)]
	_ = x[IDPTypeApple-(12)]
}

var _IDPTypeValues = []IDPType{IDPTypeOIDC, IDPTypeJWT, IDPTypeOAuth, IDPTypeSAML, IDPTypeLDAP, IDPTypeGitHub, IDPTypeGitHubEnterprise, IDPTypeGitLab, IDPTypeGitLabSelfHosted, IDPTypeAzure, IDPTypeGoogle, IDPTypeApple}

var _IDPTypeNameToValueMap = map[string]IDPType{
	_IDPTypeName[0:4]:        IDPTypeOIDC,
	_IDPTypeLowerName[0:4]:   IDPTypeOIDC,
	_IDPTypeName[4:7]:        IDPTypeJWT,
	_IDPTypeLowerName[4:7]:   IDPTypeJWT,
	_IDPTypeName[7:12]:       IDPTypeOAuth,
	_IDPTypeLowerName[7:12]:  IDPTypeOAuth,
	_IDPTypeName[12:16]:      IDPTypeSAML,
	_IDPTypeLowerName[12:16]: IDPTypeSAML,
	_IDPTypeName[16:20]:      IDPTypeLDAP,
	_IDPTypeLowerName[16:20]: IDPTypeLDAP,
	_IDPTypeName[20:26]:      IDPTypeGitHub,
	_IDPTypeLowerName[20:26]: IDPTypeGitHub,
	_IDPTypeName[26:42]:      IDPTypeGitHubEnterprise,
	_IDPTypeLowerName[26:42]: IDPTypeGitHubEnterprise,
	_IDPTypeName[42:48]:      IDPTypeGitLab,
	_IDPTypeLowerName[42:48]: IDPTypeGitLab,
	_IDPTypeName[48:64]:      IDPTypeGitLabSelfHosted,
	_IDPTypeLowerName[48:64]: IDPTypeGitLabSelfHosted,
	_IDPTypeName[64:69]:      IDPTypeAzure,
	_IDPTypeLowerName[64:69]: IDPTypeAzure,
	_IDPTypeName[69:75]:      IDPTypeGoogle,
	_IDPTypeLowerName[69:75]: IDPTypeGoogle,
	_IDPTypeName[75:80]:      IDPTypeApple,
	_IDPTypeLowerName[75:80]: IDPTypeApple,
}

var _IDPTypeNames = []string{
	_IDPTypeName[0:4],
	_IDPTypeName[4:7],
	_IDPTypeName[7:12],
	_IDPTypeName[12:16],
	_IDPTypeName[16:20],
	_IDPTypeName[20:26],
	_IDPTypeName[26:42],
	_IDPTypeName[42:48],
	_IDPTypeName[48:64],
	_IDPTypeName[64:69],
	_IDPTypeName[69:75],
	_IDPTypeName[75:80],
}

// IDPTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func IDPTypeString(s string) (IDPType, error) {
	if val, ok := _IDPTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _IDPTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to IDPType values", s)
}

// IDPTypeValues returns all values of the enum
func IDPTypeValues() []IDPType {
	return _IDPTypeValues
}

// IDPTypeStrings returns a slice of all String values of the enum
func IDPTypeStrings() []string {
	strs := make([]string, len(_IDPTypeNames))
	copy(strs, _IDPTypeNames)
	return strs
}

// IsAIDPType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i IDPType) IsAIDPType() bool {
	for _, v := range _IDPTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
