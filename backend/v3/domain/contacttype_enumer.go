// Code generated by "enumer -type ContactType -transform lower -trimprefix ContactType -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _ContactTypeName = "unspecifiedemailphone"

var _ContactTypeIndex = [...]uint8{0, 11, 16, 21}

const _ContactTypeLowerName = "unspecifiedemailphone"

func (i ContactType) String() string {
	if i >= ContactType(len(_ContactTypeIndex)-1) {
		return fmt.Sprintf("ContactType(%d)", i)
	}
	return _ContactTypeName[_ContactTypeIndex[i]:_ContactTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ContactTypeNoOp() {
	var x [1]struct{}
	_ = x[ContactTypeUnspecified-(0)]
	_ = x[ContactTypeEmail-(1)]
	_ = x[ContactTypePhone-(2)]
}

var _ContactTypeValues = []ContactType{ContactTypeUnspecified, ContactTypeEmail, ContactTypePhone}

var _ContactTypeNameToValueMap = map[string]ContactType{
	_ContactTypeName[0:11]:       ContactTypeUnspecified,
	_ContactTypeLowerName[0:11]:  ContactTypeUnspecified,
	_ContactTypeName[11:16]:      ContactTypeEmail,
	_ContactTypeLowerName[11:16]: ContactTypeEmail,
	_ContactTypeName[16:21]:      ContactTypePhone,
	_ContactTypeLowerName[16:21]: ContactTypePhone,
}

var _ContactTypeNames = []string{
	_ContactTypeName[0:11],
	_ContactTypeName[11:16],
	_ContactTypeName[16:21],
}

// ContactTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ContactTypeString(s string) (ContactType, error) {
	if val, ok := _ContactTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ContactTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ContactType values", s)
}

// ContactTypeValues returns all values of the enum
func ContactTypeValues() []ContactType {
	return _ContactTypeValues
}

// ContactTypeStrings returns a slice of all String values of the enum
func ContactTypeStrings() []string {
	strs := make([]string, len(_ContactTypeNames))
	copy(strs, _ContactTypeNames)
	return strs
}

// IsAContactType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ContactType) IsAContactType() bool {
	for _, v := range _ContactTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i ContactType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ContactType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of ContactType: %[1]T(%[1]v)", value)
	}

	val, err := ContactTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
