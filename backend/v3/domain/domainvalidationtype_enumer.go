// Code generated by "enumer -type DomainValidationType -transform lower -trimprefix DomainValidationType -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _DomainValidationTypeName = "dnshttp"

var _DomainValidationTypeIndex = [...]uint8{0, 3, 7}

const _DomainValidationTypeLowerName = "dnshttp"

func (i DomainValidationType) String() string {
	if i >= DomainValidationType(len(_DomainValidationTypeIndex)-1) {
		return fmt.Sprintf("DomainValidationType(%d)", i)
	}
	return _DomainValidationTypeName[_DomainValidationTypeIndex[i]:_DomainValidationTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DomainValidationTypeNoOp() {
	var x [1]struct{}
	_ = x[DomainValidationTypeDNS-(0)]
	_ = x[DomainValidationTypeHTTP-(1)]
}

var _DomainValidationTypeValues = []DomainValidationType{DomainValidationTypeDNS, DomainValidationTypeHTTP}

var _DomainValidationTypeNameToValueMap = map[string]DomainValidationType{
	_DomainValidationTypeName[0:3]:      DomainValidationTypeDNS,
	_DomainValidationTypeLowerName[0:3]: DomainValidationTypeDNS,
	_DomainValidationTypeName[3:7]:      DomainValidationTypeHTTP,
	_DomainValidationTypeLowerName[3:7]: DomainValidationTypeHTTP,
}

var _DomainValidationTypeNames = []string{
	_DomainValidationTypeName[0:3],
	_DomainValidationTypeName[3:7],
}

// DomainValidationTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DomainValidationTypeString(s string) (DomainValidationType, error) {
	if val, ok := _DomainValidationTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DomainValidationTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DomainValidationType values", s)
}

// DomainValidationTypeValues returns all values of the enum
func DomainValidationTypeValues() []DomainValidationType {
	return _DomainValidationTypeValues
}

// DomainValidationTypeStrings returns a slice of all String values of the enum
func DomainValidationTypeStrings() []string {
	strs := make([]string, len(_DomainValidationTypeNames))
	copy(strs, _DomainValidationTypeNames)
	return strs
}

// IsADomainValidationType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DomainValidationType) IsADomainValidationType() bool {
	for _, v := range _DomainValidationTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i DomainValidationType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DomainValidationType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of DomainValidationType: %[1]T(%[1]v)", value)
	}

	val, err := DomainValidationTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
