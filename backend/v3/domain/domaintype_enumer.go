// Code generated by "enumer -type DomainType -transform lower -trimprefix DomainType -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _DomainTypeName = "customtrusted"

var _DomainTypeIndex = [...]uint8{0, 6, 13}

const _DomainTypeLowerName = "customtrusted"

func (i DomainType) String() string {
	if i >= DomainType(len(_DomainTypeIndex)-1) {
		return fmt.Sprintf("DomainType(%d)", i)
	}
	return _DomainTypeName[_DomainTypeIndex[i]:_DomainTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DomainTypeNoOp() {
	var x [1]struct{}
	_ = x[DomainTypeCustom-(0)]
	_ = x[DomainTypeTrusted-(1)]
}

var _DomainTypeValues = []DomainType{DomainTypeCustom, DomainTypeTrusted}

var _DomainTypeNameToValueMap = map[string]DomainType{
	_DomainTypeName[0:6]:       DomainTypeCustom,
	_DomainTypeLowerName[0:6]:  DomainTypeCustom,
	_DomainTypeName[6:13]:      DomainTypeTrusted,
	_DomainTypeLowerName[6:13]: DomainTypeTrusted,
}

var _DomainTypeNames = []string{
	_DomainTypeName[0:6],
	_DomainTypeName[6:13],
}

// DomainTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DomainTypeString(s string) (DomainType, error) {
	if val, ok := _DomainTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DomainTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DomainType values", s)
}

// DomainTypeValues returns all values of the enum
func DomainTypeValues() []DomainType {
	return _DomainTypeValues
}

// DomainTypeStrings returns a slice of all String values of the enum
func DomainTypeStrings() []string {
	strs := make([]string, len(_DomainTypeNames))
	copy(strs, _DomainTypeNames)
	return strs
}

// IsADomainType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DomainType) IsADomainType() bool {
	for _, v := range _DomainTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i DomainType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DomainType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of DomainType: %[1]T(%[1]v)", value)
	}

	val, err := DomainTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
