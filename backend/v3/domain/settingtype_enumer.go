// Code generated by "enumer -type SettingType -transform snake -trimprefix SettingType -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _SettingTypeName = "unspecifiedloginlabelpassword_complexitypassword_expirydomainlockoutsecurityorganization"

var _SettingTypeIndex = [...]uint8{0, 11, 16, 21, 40, 55, 61, 68, 76, 88}

const _SettingTypeLowerName = "unspecifiedloginlabelpassword_complexitypassword_expirydomainlockoutsecurityorganization"

func (i SettingType) String() string {
	if i >= SettingType(len(_SettingTypeIndex)-1) {
		return fmt.Sprintf("SettingType(%d)", i)
	}
	return _SettingTypeName[_SettingTypeIndex[i]:_SettingTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SettingTypeNoOp() {
	var x [1]struct{}
	_ = x[SettingTypeUnspecified-(0)]
	_ = x[SettingTypeLogin-(1)]
	_ = x[SettingTypeLabel-(2)]
	_ = x[SettingTypePasswordComplexity-(3)]
	_ = x[SettingTypePasswordExpiry-(4)]
	_ = x[SettingTypeDomain-(5)]
	_ = x[SettingTypeLockout-(6)]
	_ = x[SettingTypeSecurity-(7)]
	_ = x[SettingTypeOrganization-(8)]
}

var _SettingTypeValues = []SettingType{SettingTypeUnspecified, SettingTypeLogin, SettingTypeLabel, SettingTypePasswordComplexity, SettingTypePasswordExpiry, SettingTypeDomain, SettingTypeLockout, SettingTypeSecurity, SettingTypeOrganization}

var _SettingTypeNameToValueMap = map[string]SettingType{
	_SettingTypeName[0:11]:       SettingTypeUnspecified,
	_SettingTypeLowerName[0:11]:  SettingTypeUnspecified,
	_SettingTypeName[11:16]:      SettingTypeLogin,
	_SettingTypeLowerName[11:16]: SettingTypeLogin,
	_SettingTypeName[16:21]:      SettingTypeLabel,
	_SettingTypeLowerName[16:21]: SettingTypeLabel,
	_SettingTypeName[21:40]:      SettingTypePasswordComplexity,
	_SettingTypeLowerName[21:40]: SettingTypePasswordComplexity,
	_SettingTypeName[40:55]:      SettingTypePasswordExpiry,
	_SettingTypeLowerName[40:55]: SettingTypePasswordExpiry,
	_SettingTypeName[55:61]:      SettingTypeDomain,
	_SettingTypeLowerName[55:61]: SettingTypeDomain,
	_SettingTypeName[61:68]:      SettingTypeLockout,
	_SettingTypeLowerName[61:68]: SettingTypeLockout,
	_SettingTypeName[68:76]:      SettingTypeSecurity,
	_SettingTypeLowerName[68:76]: SettingTypeSecurity,
	_SettingTypeName[76:88]:      SettingTypeOrganization,
	_SettingTypeLowerName[76:88]: SettingTypeOrganization,
}

var _SettingTypeNames = []string{
	_SettingTypeName[0:11],
	_SettingTypeName[11:16],
	_SettingTypeName[16:21],
	_SettingTypeName[21:40],
	_SettingTypeName[40:55],
	_SettingTypeName[55:61],
	_SettingTypeName[61:68],
	_SettingTypeName[68:76],
	_SettingTypeName[76:88],
}

// SettingTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SettingTypeString(s string) (SettingType, error) {
	if val, ok := _SettingTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SettingTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SettingType values", s)
}

// SettingTypeValues returns all values of the enum
func SettingTypeValues() []SettingType {
	return _SettingTypeValues
}

// SettingTypeStrings returns a slice of all String values of the enum
func SettingTypeStrings() []string {
	strs := make([]string, len(_SettingTypeNames))
	copy(strs, _SettingTypeNames)
	return strs
}

// IsASettingType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SettingType) IsASettingType() bool {
	for _, v := range _SettingTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i SettingType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *SettingType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of SettingType: %[1]T(%[1]v)", value)
	}

	val, err := SettingTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
