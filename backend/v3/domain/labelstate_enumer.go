// Code generated by "enumer -type LabelState -transform snake -trimprefix LabelState -sql"; DO NOT EDIT.

package domain

import (
	"database/sql/driver"
	"fmt"
	"strings"
)

const _LabelStateName = "previewactivated"

var _LabelStateIndex = [...]uint8{0, 7, 16}

const _LabelStateLowerName = "previewactivated"

func (i LabelState) String() string {
	i -= 1
	if i < 0 || i >= LabelState(len(_LabelStateIndex)-1) {
		return fmt.Sprintf("LabelState(%d)", i+1)
	}
	return _LabelStateName[_LabelStateIndex[i]:_LabelStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LabelStateNoOp() {
	var x [1]struct{}
	_ = x[LabelStatePreview-(1)]
	_ = x[LabelStateActivated-(2)]
}

var _LabelStateValues = []LabelState{LabelStatePreview, LabelStateActivated}

var _LabelStateNameToValueMap = map[string]LabelState{
	_LabelStateName[0:7]:       LabelStatePreview,
	_LabelStateLowerName[0:7]:  LabelStatePreview,
	_LabelStateName[7:16]:      LabelStateActivated,
	_LabelStateLowerName[7:16]: LabelStateActivated,
}

var _LabelStateNames = []string{
	_LabelStateName[0:7],
	_LabelStateName[7:16],
}

// LabelStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LabelStateString(s string) (LabelState, error) {
	if val, ok := _LabelStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LabelStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LabelState values", s)
}

// LabelStateValues returns all values of the enum
func LabelStateValues() []LabelState {
	return _LabelStateValues
}

// LabelStateStrings returns a slice of all String values of the enum
func LabelStateStrings() []string {
	strs := make([]string, len(_LabelStateNames))
	copy(strs, _LabelStateNames)
	return strs
}

// IsALabelState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LabelState) IsALabelState() bool {
	for _, v := range _LabelStateValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i LabelState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *LabelState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of LabelState: %[1]T(%[1]v)", value)
	}

	val, err := LabelStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
