// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/backend/v3/domain (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -typed -package domainmock -destination ./mock/querier.mock.go . Querier
//

// Package domainmock is a generated GoMock package.
package domainmock

import (
	context "context"
	reflect "reflect"

	domain "github.com/zitadel/zitadel/backend/v3/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder[T]
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder[T any] struct {
	mock *MockQuerier[T]
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier[T any](ctrl *gomock.Controller) *MockQuerier[T] {
	mock := &MockQuerier[T]{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier[T]) EXPECT() *MockQuerierMockRecorder[T] {
	return m.recorder
}

// Execute mocks base method.
func (m *MockQuerier[T]) Execute(ctx context.Context, opts *domain.InvokeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockQuerierMockRecorder[T]) Execute(ctx, opts any) *MockQuerierExecuteCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockQuerier[T])(nil).Execute), ctx, opts)
	return &MockQuerierExecuteCall[T]{Call: call}
}

// MockQuerierExecuteCall wrap *gomock.Call
type MockQuerierExecuteCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierExecuteCall[T]) Return(err error) *MockQuerierExecuteCall[T] {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierExecuteCall[T]) Do(f func(context.Context, *domain.InvokeOpts) error) *MockQuerierExecuteCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierExecuteCall[T]) DoAndReturn(f func(context.Context, *domain.InvokeOpts) error) *MockQuerierExecuteCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Result mocks base method.
func (m *MockQuerier[T]) Result() T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(T)
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockQuerierMockRecorder[T]) Result() *MockQuerierResultCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockQuerier[T])(nil).Result))
	return &MockQuerierResultCall[T]{Call: call}
}

// MockQuerierResultCall wrap *gomock.Call
type MockQuerierResultCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierResultCall[T]) Return(arg0 T) *MockQuerierResultCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierResultCall[T]) Do(f func() T) *MockQuerierResultCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierResultCall[T]) DoAndReturn(f func() T) *MockQuerierResultCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockQuerier[T]) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockQuerierMockRecorder[T]) String() *MockQuerierStringCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockQuerier[T])(nil).String))
	return &MockQuerierStringCall[T]{Call: call}
}

// MockQuerierStringCall wrap *gomock.Call
type MockQuerierStringCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierStringCall[T]) Return(arg0 string) *MockQuerierStringCall[T] {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierStringCall[T]) Do(f func() string) *MockQuerierStringCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierStringCall[T]) DoAndReturn(f func() string) *MockQuerierStringCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockQuerier[T]) Validate(ctx context.Context, opts *domain.InvokeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockQuerierMockRecorder[T]) Validate(ctx, opts any) *MockQuerierValidateCall[T] {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockQuerier[T])(nil).Validate), ctx, opts)
	return &MockQuerierValidateCall[T]{Call: call}
}

// MockQuerierValidateCall wrap *gomock.Call
type MockQuerierValidateCall[T any] struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierValidateCall[T]) Return(err error) *MockQuerierValidateCall[T] {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierValidateCall[T]) Do(f func(context.Context, *domain.InvokeOpts) error) *MockQuerierValidateCall[T] {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierValidateCall[T]) DoAndReturn(f func(context.Context, *domain.InvokeOpts) error) *MockQuerierValidateCall[T] {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
