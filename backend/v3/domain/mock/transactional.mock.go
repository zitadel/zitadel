// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/backend/v3/domain (interfaces: Transactional)
//
// Generated by this command:
//
//	mockgen -destination=mock/transactional.mock.go -package=domainmock . Transactional
//

// Package domainmock is a generated GoMock package.
package domainmock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactional is a mock of Transactional interface.
type MockTransactional struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionalMockRecorder
	isgomock struct{}
}

// MockTransactionalMockRecorder is the mock recorder for MockTransactional.
type MockTransactionalMockRecorder struct {
	mock *MockTransactional
}

// NewMockTransactional creates a new mock instance.
func NewMockTransactional(ctrl *gomock.Controller) *MockTransactional {
	mock := &MockTransactional{ctrl: ctrl}
	mock.recorder = &MockTransactionalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactional) EXPECT() *MockTransactionalMockRecorder {
	return m.recorder
}

// RequiresTransaction mocks base method.
func (m *MockTransactional) RequiresTransaction() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequiresTransaction")
}

// RequiresTransaction indicates an expected call of RequiresTransaction.
func (mr *MockTransactionalMockRecorder) RequiresTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiresTransaction", reflect.TypeOf((*MockTransactional)(nil).RequiresTransaction))
}
