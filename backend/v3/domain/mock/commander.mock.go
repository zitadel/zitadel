// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/backend/v3/domain (interfaces: Commander)
//
// Generated by this command:
//
//	mockgen -typed -package domainmock -destination ./mock/commander.mock.go . Commander
//

// Package domainmock is a generated GoMock package.
package domainmock

import (
	context "context"
	reflect "reflect"

	domain "github.com/zitadel/zitadel/backend/v3/domain"
	eventstore "github.com/zitadel/zitadel/internal/eventstore"
	gomock "go.uber.org/mock/gomock"
)

// MockCommander is a mock of Commander interface.
type MockCommander struct {
	ctrl     *gomock.Controller
	recorder *MockCommanderMockRecorder
	isgomock struct{}
}

// MockCommanderMockRecorder is the mock recorder for MockCommander.
type MockCommanderMockRecorder struct {
	mock *MockCommander
}

// NewMockCommander creates a new mock instance.
func NewMockCommander(ctrl *gomock.Controller) *MockCommander {
	mock := &MockCommander{ctrl: ctrl}
	mock.recorder = &MockCommanderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommander) EXPECT() *MockCommanderMockRecorder {
	return m.recorder
}

// Events mocks base method.
func (m *MockCommander) Events(ctx context.Context, opts *domain.InvokeOpts) ([]eventstore.Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, opts)
	ret0, _ := ret[0].([]eventstore.Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Events indicates an expected call of Events.
func (mr *MockCommanderMockRecorder) Events(ctx, opts any) *MockCommanderEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockCommander)(nil).Events), ctx, opts)
	return &MockCommanderEventsCall{Call: call}
}

// MockCommanderEventsCall wrap *gomock.Call
type MockCommanderEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommanderEventsCall) Return(arg0 []eventstore.Command, arg1 error) *MockCommanderEventsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommanderEventsCall) Do(f func(context.Context, *domain.InvokeOpts) ([]eventstore.Command, error)) *MockCommanderEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommanderEventsCall) DoAndReturn(f func(context.Context, *domain.InvokeOpts) ([]eventstore.Command, error)) *MockCommanderEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Execute mocks base method.
func (m *MockCommander) Execute(ctx context.Context, opts *domain.InvokeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommanderMockRecorder) Execute(ctx, opts any) *MockCommanderExecuteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommander)(nil).Execute), ctx, opts)
	return &MockCommanderExecuteCall{Call: call}
}

// MockCommanderExecuteCall wrap *gomock.Call
type MockCommanderExecuteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommanderExecuteCall) Return(err error) *MockCommanderExecuteCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommanderExecuteCall) Do(f func(context.Context, *domain.InvokeOpts) error) *MockCommanderExecuteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommanderExecuteCall) DoAndReturn(f func(context.Context, *domain.InvokeOpts) error) *MockCommanderExecuteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockCommander) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCommanderMockRecorder) String() *MockCommanderStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCommander)(nil).String))
	return &MockCommanderStringCall{Call: call}
}

// MockCommanderStringCall wrap *gomock.Call
type MockCommanderStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommanderStringCall) Return(arg0 string) *MockCommanderStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommanderStringCall) Do(f func() string) *MockCommanderStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommanderStringCall) DoAndReturn(f func() string) *MockCommanderStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Validate mocks base method.
func (m *MockCommander) Validate(ctx context.Context, opts *domain.InvokeOpts) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockCommanderMockRecorder) Validate(ctx, opts any) *MockCommanderValidateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockCommander)(nil).Validate), ctx, opts)
	return &MockCommanderValidateCall{Call: call}
}

// MockCommanderValidateCall wrap *gomock.Call
type MockCommanderValidateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCommanderValidateCall) Return(err error) *MockCommanderValidateCall {
	c.Call = c.Call.Return(err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCommanderValidateCall) Do(f func(context.Context, *domain.InvokeOpts) error) *MockCommanderValidateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCommanderValidateCall) DoAndReturn(f func(context.Context, *domain.InvokeOpts) error) *MockCommanderValidateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
