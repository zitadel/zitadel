// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/org/v2beta/org_service.proto

package orgconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/org/v2beta"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrganizationServiceName is the fully-qualified name of the OrganizationService service.
	OrganizationServiceName = "zitadel.org.v2beta.OrganizationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrganizationServiceCreateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's CreateOrganization RPC.
	OrganizationServiceCreateOrganizationProcedure = "/zitadel.org.v2beta.OrganizationService/CreateOrganization"
	// OrganizationServiceUpdateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's UpdateOrganization RPC.
	OrganizationServiceUpdateOrganizationProcedure = "/zitadel.org.v2beta.OrganizationService/UpdateOrganization"
	// OrganizationServiceListOrganizationsProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganizations RPC.
	OrganizationServiceListOrganizationsProcedure = "/zitadel.org.v2beta.OrganizationService/ListOrganizations"
	// OrganizationServiceDeleteOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's DeleteOrganization RPC.
	OrganizationServiceDeleteOrganizationProcedure = "/zitadel.org.v2beta.OrganizationService/DeleteOrganization"
	// OrganizationServiceSetOrganizationMetadataProcedure is the fully-qualified name of the
	// OrganizationService's SetOrganizationMetadata RPC.
	OrganizationServiceSetOrganizationMetadataProcedure = "/zitadel.org.v2beta.OrganizationService/SetOrganizationMetadata"
	// OrganizationServiceListOrganizationMetadataProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganizationMetadata RPC.
	OrganizationServiceListOrganizationMetadataProcedure = "/zitadel.org.v2beta.OrganizationService/ListOrganizationMetadata"
	// OrganizationServiceDeleteOrganizationMetadataProcedure is the fully-qualified name of the
	// OrganizationService's DeleteOrganizationMetadata RPC.
	OrganizationServiceDeleteOrganizationMetadataProcedure = "/zitadel.org.v2beta.OrganizationService/DeleteOrganizationMetadata"
	// OrganizationServiceAddOrganizationDomainProcedure is the fully-qualified name of the
	// OrganizationService's AddOrganizationDomain RPC.
	OrganizationServiceAddOrganizationDomainProcedure = "/zitadel.org.v2beta.OrganizationService/AddOrganizationDomain"
	// OrganizationServiceListOrganizationDomainsProcedure is the fully-qualified name of the
	// OrganizationService's ListOrganizationDomains RPC.
	OrganizationServiceListOrganizationDomainsProcedure = "/zitadel.org.v2beta.OrganizationService/ListOrganizationDomains"
	// OrganizationServiceDeleteOrganizationDomainProcedure is the fully-qualified name of the
	// OrganizationService's DeleteOrganizationDomain RPC.
	OrganizationServiceDeleteOrganizationDomainProcedure = "/zitadel.org.v2beta.OrganizationService/DeleteOrganizationDomain"
	// OrganizationServiceGenerateOrganizationDomainValidationProcedure is the fully-qualified name of
	// the OrganizationService's GenerateOrganizationDomainValidation RPC.
	OrganizationServiceGenerateOrganizationDomainValidationProcedure = "/zitadel.org.v2beta.OrganizationService/GenerateOrganizationDomainValidation"
	// OrganizationServiceVerifyOrganizationDomainProcedure is the fully-qualified name of the
	// OrganizationService's VerifyOrganizationDomain RPC.
	OrganizationServiceVerifyOrganizationDomainProcedure = "/zitadel.org.v2beta.OrganizationService/VerifyOrganizationDomain"
	// OrganizationServiceDeactivateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's DeactivateOrganization RPC.
	OrganizationServiceDeactivateOrganizationProcedure = "/zitadel.org.v2beta.OrganizationService/DeactivateOrganization"
	// OrganizationServiceActivateOrganizationProcedure is the fully-qualified name of the
	// OrganizationService's ActivateOrganization RPC.
	OrganizationServiceActivateOrganizationProcedure = "/zitadel.org.v2beta.OrganizationService/ActivateOrganization"
)

// OrganizationServiceClient is a client for the zitadel.org.v2beta.OrganizationService service.
type OrganizationServiceClient interface {
	// Create Organization
	//
	// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
	//
	// Required permission:
	//   - `org.create`
	CreateOrganization(context.Context, *connect.Request[v2beta.CreateOrganizationRequest]) (*connect.Response[v2beta.CreateOrganizationResponse], error)
	// Update Organization
	//
	// Change the name of the organization.
	//
	// Required permission:
	//   - `org.write`
	UpdateOrganization(context.Context, *connect.Request[v2beta.UpdateOrganizationRequest]) (*connect.Response[v2beta.UpdateOrganizationResponse], error)
	// List Organizations
	//
	// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
	//
	// Required permission:
	//   - `iam.read`
	ListOrganizations(context.Context, *connect.Request[v2beta.ListOrganizationsRequest]) (*connect.Response[v2beta.ListOrganizationsResponse], error)
	// Delete Organization
	//
	// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
	//
	// Required permission:
	//   - `org.delete`
	DeleteOrganization(context.Context, *connect.Request[v2beta.DeleteOrganizationRequest]) (*connect.Response[v2beta.DeleteOrganizationResponse], error)
	// Set Organization Metadata
	//
	// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
	//
	// Required permission:
	//   - `org.write`
	SetOrganizationMetadata(context.Context, *connect.Request[v2beta.SetOrganizationMetadataRequest]) (*connect.Response[v2beta.SetOrganizationMetadataResponse], error)
	// List Organization Metadata
	//
	// List metadata of an organization filtered by query.
	//
	// Required permission:
	//   - `org.read`
	ListOrganizationMetadata(context.Context, *connect.Request[v2beta.ListOrganizationMetadataRequest]) (*connect.Response[v2beta.ListOrganizationMetadataResponse], error)
	// Delete Organization Metadata
	//
	// Delete metadata objects from an organization with a specific key.
	//
	// Required permission:
	//   - `org.write`
	DeleteOrganizationMetadata(context.Context, *connect.Request[v2beta.DeleteOrganizationMetadataRequest]) (*connect.Response[v2beta.DeleteOrganizationMetadataResponse], error)
	// Add Organization Domain
	//
	// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
	//
	// Required permission:
	//   - `org.write`
	AddOrganizationDomain(context.Context, *connect.Request[v2beta.AddOrganizationDomainRequest]) (*connect.Response[v2beta.AddOrganizationDomainResponse], error)
	// List Organization Domains
	//
	// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs.
	//
	// Required permission:
	//   - `org.read`
	ListOrganizationDomains(context.Context, *connect.Request[v2beta.ListOrganizationDomainsRequest]) (*connect.Response[v2beta.ListOrganizationDomainsResponse], error)
	// Delete Organization Domain
	//
	// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
	//
	// Required permission:
	//   - `org.write`
	DeleteOrganizationDomain(context.Context, *connect.Request[v2beta.DeleteOrganizationDomainRequest]) (*connect.Response[v2beta.DeleteOrganizationDomainResponse], error)
	// Generate Organization Domain Validation
	//
	// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
	//
	// Required permission:
	//   - `org.write`
	GenerateOrganizationDomainValidation(context.Context, *connect.Request[v2beta.GenerateOrganizationDomainValidationRequest]) (*connect.Response[v2beta.GenerateOrganizationDomainValidationResponse], error)
	// Verify Organization Domain
	//
	// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
	//
	// Required permission:
	//   - `org.write`
	VerifyOrganizationDomain(context.Context, *connect.Request[v2beta.VerifyOrganizationDomainRequest]) (*connect.Response[v2beta.VerifyOrganizationDomainResponse], error)
	// Deactivate Organization
	//
	// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
	//
	// Required permission:
	//   - `org.write`
	DeactivateOrganization(context.Context, *connect.Request[v2beta.DeactivateOrganizationRequest]) (*connect.Response[v2beta.DeactivateOrganizationResponse], error)
	// Activate Organization
	//
	// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
	//
	// Required permission:
	//   - `org.write`
	ActivateOrganization(context.Context, *connect.Request[v2beta.ActivateOrganizationRequest]) (*connect.Response[v2beta.ActivateOrganizationResponse], error)
}

// NewOrganizationServiceClient constructs a client for the zitadel.org.v2beta.OrganizationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrganizationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrganizationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	organizationServiceMethods := v2beta.File_zitadel_org_v2beta_org_service_proto.Services().ByName("OrganizationService").Methods()
	return &organizationServiceClient{
		createOrganization: connect.NewClient[v2beta.CreateOrganizationRequest, v2beta.CreateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceCreateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("CreateOrganization")),
			connect.WithClientOptions(opts...),
		),
		updateOrganization: connect.NewClient[v2beta.UpdateOrganizationRequest, v2beta.UpdateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceUpdateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
			connect.WithClientOptions(opts...),
		),
		listOrganizations: connect.NewClient[v2beta.ListOrganizationsRequest, v2beta.ListOrganizationsResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListOrganizations")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganization: connect.NewClient[v2beta.DeleteOrganizationRequest, v2beta.DeleteOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceDeleteOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganization")),
			connect.WithClientOptions(opts...),
		),
		setOrganizationMetadata: connect.NewClient[v2beta.SetOrganizationMetadataRequest, v2beta.SetOrganizationMetadataResponse](
			httpClient,
			baseURL+OrganizationServiceSetOrganizationMetadataProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("SetOrganizationMetadata")),
			connect.WithClientOptions(opts...),
		),
		listOrganizationMetadata: connect.NewClient[v2beta.ListOrganizationMetadataRequest, v2beta.ListOrganizationMetadataResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationMetadataProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListOrganizationMetadata")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationMetadata: connect.NewClient[v2beta.DeleteOrganizationMetadataRequest, v2beta.DeleteOrganizationMetadataResponse](
			httpClient,
			baseURL+OrganizationServiceDeleteOrganizationMetadataProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganizationMetadata")),
			connect.WithClientOptions(opts...),
		),
		addOrganizationDomain: connect.NewClient[v2beta.AddOrganizationDomainRequest, v2beta.AddOrganizationDomainResponse](
			httpClient,
			baseURL+OrganizationServiceAddOrganizationDomainProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("AddOrganizationDomain")),
			connect.WithClientOptions(opts...),
		),
		listOrganizationDomains: connect.NewClient[v2beta.ListOrganizationDomainsRequest, v2beta.ListOrganizationDomainsResponse](
			httpClient,
			baseURL+OrganizationServiceListOrganizationDomainsProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ListOrganizationDomains")),
			connect.WithClientOptions(opts...),
		),
		deleteOrganizationDomain: connect.NewClient[v2beta.DeleteOrganizationDomainRequest, v2beta.DeleteOrganizationDomainResponse](
			httpClient,
			baseURL+OrganizationServiceDeleteOrganizationDomainProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganizationDomain")),
			connect.WithClientOptions(opts...),
		),
		generateOrganizationDomainValidation: connect.NewClient[v2beta.GenerateOrganizationDomainValidationRequest, v2beta.GenerateOrganizationDomainValidationResponse](
			httpClient,
			baseURL+OrganizationServiceGenerateOrganizationDomainValidationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("GenerateOrganizationDomainValidation")),
			connect.WithClientOptions(opts...),
		),
		verifyOrganizationDomain: connect.NewClient[v2beta.VerifyOrganizationDomainRequest, v2beta.VerifyOrganizationDomainResponse](
			httpClient,
			baseURL+OrganizationServiceVerifyOrganizationDomainProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("VerifyOrganizationDomain")),
			connect.WithClientOptions(opts...),
		),
		deactivateOrganization: connect.NewClient[v2beta.DeactivateOrganizationRequest, v2beta.DeactivateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceDeactivateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("DeactivateOrganization")),
			connect.WithClientOptions(opts...),
		),
		activateOrganization: connect.NewClient[v2beta.ActivateOrganizationRequest, v2beta.ActivateOrganizationResponse](
			httpClient,
			baseURL+OrganizationServiceActivateOrganizationProcedure,
			connect.WithSchema(organizationServiceMethods.ByName("ActivateOrganization")),
			connect.WithClientOptions(opts...),
		),
	}
}

// organizationServiceClient implements OrganizationServiceClient.
type organizationServiceClient struct {
	createOrganization                   *connect.Client[v2beta.CreateOrganizationRequest, v2beta.CreateOrganizationResponse]
	updateOrganization                   *connect.Client[v2beta.UpdateOrganizationRequest, v2beta.UpdateOrganizationResponse]
	listOrganizations                    *connect.Client[v2beta.ListOrganizationsRequest, v2beta.ListOrganizationsResponse]
	deleteOrganization                   *connect.Client[v2beta.DeleteOrganizationRequest, v2beta.DeleteOrganizationResponse]
	setOrganizationMetadata              *connect.Client[v2beta.SetOrganizationMetadataRequest, v2beta.SetOrganizationMetadataResponse]
	listOrganizationMetadata             *connect.Client[v2beta.ListOrganizationMetadataRequest, v2beta.ListOrganizationMetadataResponse]
	deleteOrganizationMetadata           *connect.Client[v2beta.DeleteOrganizationMetadataRequest, v2beta.DeleteOrganizationMetadataResponse]
	addOrganizationDomain                *connect.Client[v2beta.AddOrganizationDomainRequest, v2beta.AddOrganizationDomainResponse]
	listOrganizationDomains              *connect.Client[v2beta.ListOrganizationDomainsRequest, v2beta.ListOrganizationDomainsResponse]
	deleteOrganizationDomain             *connect.Client[v2beta.DeleteOrganizationDomainRequest, v2beta.DeleteOrganizationDomainResponse]
	generateOrganizationDomainValidation *connect.Client[v2beta.GenerateOrganizationDomainValidationRequest, v2beta.GenerateOrganizationDomainValidationResponse]
	verifyOrganizationDomain             *connect.Client[v2beta.VerifyOrganizationDomainRequest, v2beta.VerifyOrganizationDomainResponse]
	deactivateOrganization               *connect.Client[v2beta.DeactivateOrganizationRequest, v2beta.DeactivateOrganizationResponse]
	activateOrganization                 *connect.Client[v2beta.ActivateOrganizationRequest, v2beta.ActivateOrganizationResponse]
}

// CreateOrganization calls zitadel.org.v2beta.OrganizationService.CreateOrganization.
func (c *organizationServiceClient) CreateOrganization(ctx context.Context, req *connect.Request[v2beta.CreateOrganizationRequest]) (*connect.Response[v2beta.CreateOrganizationResponse], error) {
	return c.createOrganization.CallUnary(ctx, req)
}

// UpdateOrganization calls zitadel.org.v2beta.OrganizationService.UpdateOrganization.
func (c *organizationServiceClient) UpdateOrganization(ctx context.Context, req *connect.Request[v2beta.UpdateOrganizationRequest]) (*connect.Response[v2beta.UpdateOrganizationResponse], error) {
	return c.updateOrganization.CallUnary(ctx, req)
}

// ListOrganizations calls zitadel.org.v2beta.OrganizationService.ListOrganizations.
func (c *organizationServiceClient) ListOrganizations(ctx context.Context, req *connect.Request[v2beta.ListOrganizationsRequest]) (*connect.Response[v2beta.ListOrganizationsResponse], error) {
	return c.listOrganizations.CallUnary(ctx, req)
}

// DeleteOrganization calls zitadel.org.v2beta.OrganizationService.DeleteOrganization.
func (c *organizationServiceClient) DeleteOrganization(ctx context.Context, req *connect.Request[v2beta.DeleteOrganizationRequest]) (*connect.Response[v2beta.DeleteOrganizationResponse], error) {
	return c.deleteOrganization.CallUnary(ctx, req)
}

// SetOrganizationMetadata calls zitadel.org.v2beta.OrganizationService.SetOrganizationMetadata.
func (c *organizationServiceClient) SetOrganizationMetadata(ctx context.Context, req *connect.Request[v2beta.SetOrganizationMetadataRequest]) (*connect.Response[v2beta.SetOrganizationMetadataResponse], error) {
	return c.setOrganizationMetadata.CallUnary(ctx, req)
}

// ListOrganizationMetadata calls zitadel.org.v2beta.OrganizationService.ListOrganizationMetadata.
func (c *organizationServiceClient) ListOrganizationMetadata(ctx context.Context, req *connect.Request[v2beta.ListOrganizationMetadataRequest]) (*connect.Response[v2beta.ListOrganizationMetadataResponse], error) {
	return c.listOrganizationMetadata.CallUnary(ctx, req)
}

// DeleteOrganizationMetadata calls
// zitadel.org.v2beta.OrganizationService.DeleteOrganizationMetadata.
func (c *organizationServiceClient) DeleteOrganizationMetadata(ctx context.Context, req *connect.Request[v2beta.DeleteOrganizationMetadataRequest]) (*connect.Response[v2beta.DeleteOrganizationMetadataResponse], error) {
	return c.deleteOrganizationMetadata.CallUnary(ctx, req)
}

// AddOrganizationDomain calls zitadel.org.v2beta.OrganizationService.AddOrganizationDomain.
func (c *organizationServiceClient) AddOrganizationDomain(ctx context.Context, req *connect.Request[v2beta.AddOrganizationDomainRequest]) (*connect.Response[v2beta.AddOrganizationDomainResponse], error) {
	return c.addOrganizationDomain.CallUnary(ctx, req)
}

// ListOrganizationDomains calls zitadel.org.v2beta.OrganizationService.ListOrganizationDomains.
func (c *organizationServiceClient) ListOrganizationDomains(ctx context.Context, req *connect.Request[v2beta.ListOrganizationDomainsRequest]) (*connect.Response[v2beta.ListOrganizationDomainsResponse], error) {
	return c.listOrganizationDomains.CallUnary(ctx, req)
}

// DeleteOrganizationDomain calls zitadel.org.v2beta.OrganizationService.DeleteOrganizationDomain.
func (c *organizationServiceClient) DeleteOrganizationDomain(ctx context.Context, req *connect.Request[v2beta.DeleteOrganizationDomainRequest]) (*connect.Response[v2beta.DeleteOrganizationDomainResponse], error) {
	return c.deleteOrganizationDomain.CallUnary(ctx, req)
}

// GenerateOrganizationDomainValidation calls
// zitadel.org.v2beta.OrganizationService.GenerateOrganizationDomainValidation.
func (c *organizationServiceClient) GenerateOrganizationDomainValidation(ctx context.Context, req *connect.Request[v2beta.GenerateOrganizationDomainValidationRequest]) (*connect.Response[v2beta.GenerateOrganizationDomainValidationResponse], error) {
	return c.generateOrganizationDomainValidation.CallUnary(ctx, req)
}

// VerifyOrganizationDomain calls zitadel.org.v2beta.OrganizationService.VerifyOrganizationDomain.
func (c *organizationServiceClient) VerifyOrganizationDomain(ctx context.Context, req *connect.Request[v2beta.VerifyOrganizationDomainRequest]) (*connect.Response[v2beta.VerifyOrganizationDomainResponse], error) {
	return c.verifyOrganizationDomain.CallUnary(ctx, req)
}

// DeactivateOrganization calls zitadel.org.v2beta.OrganizationService.DeactivateOrganization.
func (c *organizationServiceClient) DeactivateOrganization(ctx context.Context, req *connect.Request[v2beta.DeactivateOrganizationRequest]) (*connect.Response[v2beta.DeactivateOrganizationResponse], error) {
	return c.deactivateOrganization.CallUnary(ctx, req)
}

// ActivateOrganization calls zitadel.org.v2beta.OrganizationService.ActivateOrganization.
func (c *organizationServiceClient) ActivateOrganization(ctx context.Context, req *connect.Request[v2beta.ActivateOrganizationRequest]) (*connect.Response[v2beta.ActivateOrganizationResponse], error) {
	return c.activateOrganization.CallUnary(ctx, req)
}

// OrganizationServiceHandler is an implementation of the zitadel.org.v2beta.OrganizationService
// service.
type OrganizationServiceHandler interface {
	// Create Organization
	//
	// Create a new organization with an administrative user. If no specific roles are sent for the users, they will be granted the role ORG_OWNER.
	//
	// Required permission:
	//   - `org.create`
	CreateOrganization(context.Context, *connect.Request[v2beta.CreateOrganizationRequest]) (*connect.Response[v2beta.CreateOrganizationResponse], error)
	// Update Organization
	//
	// Change the name of the organization.
	//
	// Required permission:
	//   - `org.write`
	UpdateOrganization(context.Context, *connect.Request[v2beta.UpdateOrganizationRequest]) (*connect.Response[v2beta.UpdateOrganizationResponse], error)
	// List Organizations
	//
	// Returns a list of organizations that match the requesting filters. All filters are applied with an AND condition.
	//
	// Required permission:
	//   - `iam.read`
	ListOrganizations(context.Context, *connect.Request[v2beta.ListOrganizationsRequest]) (*connect.Response[v2beta.ListOrganizationsResponse], error)
	// Delete Organization
	//
	// Deletes the organization and all its resources (Users, Projects, Grants to and from the org). Users of this organization will not be able to log in.
	//
	// Required permission:
	//   - `org.delete`
	DeleteOrganization(context.Context, *connect.Request[v2beta.DeleteOrganizationRequest]) (*connect.Response[v2beta.DeleteOrganizationResponse], error)
	// Set Organization Metadata
	//
	// Adds or updates a metadata value for the requested key. Make sure the value is base64 encoded.
	//
	// Required permission:
	//   - `org.write`
	SetOrganizationMetadata(context.Context, *connect.Request[v2beta.SetOrganizationMetadataRequest]) (*connect.Response[v2beta.SetOrganizationMetadataResponse], error)
	// List Organization Metadata
	//
	// List metadata of an organization filtered by query.
	//
	// Required permission:
	//   - `org.read`
	ListOrganizationMetadata(context.Context, *connect.Request[v2beta.ListOrganizationMetadataRequest]) (*connect.Response[v2beta.ListOrganizationMetadataResponse], error)
	// Delete Organization Metadata
	//
	// Delete metadata objects from an organization with a specific key.
	//
	// Required permission:
	//   - `org.write`
	DeleteOrganizationMetadata(context.Context, *connect.Request[v2beta.DeleteOrganizationMetadataRequest]) (*connect.Response[v2beta.DeleteOrganizationMetadataResponse], error)
	// Add Organization Domain
	//
	// Add a new domain to an organization. The domains are used to identify to which organization a user belongs.
	//
	// Required permission:
	//   - `org.write`
	AddOrganizationDomain(context.Context, *connect.Request[v2beta.AddOrganizationDomainRequest]) (*connect.Response[v2beta.AddOrganizationDomainResponse], error)
	// List Organization Domains
	//
	// Returns the list of registered domains of an organization. The domains are used to identify to which organization a user belongs.
	//
	// Required permission:
	//   - `org.read`
	ListOrganizationDomains(context.Context, *connect.Request[v2beta.ListOrganizationDomainsRequest]) (*connect.Response[v2beta.ListOrganizationDomainsResponse], error)
	// Delete Organization Domain
	//
	// Delete a new domain from an organization. The domains are used to identify to which organization a user belongs. If the uses use the domain for login, this will not be possible afterwards. They have to use another domain instead.
	//
	// Required permission:
	//   - `org.write`
	DeleteOrganizationDomain(context.Context, *connect.Request[v2beta.DeleteOrganizationDomainRequest]) (*connect.Response[v2beta.DeleteOrganizationDomainResponse], error)
	// Generate Organization Domain Validation
	//
	// Generate a new file to be able to verify your domain with DNS or HTTP challenge.
	//
	// Required permission:
	//   - `org.write`
	GenerateOrganizationDomainValidation(context.Context, *connect.Request[v2beta.GenerateOrganizationDomainValidationRequest]) (*connect.Response[v2beta.GenerateOrganizationDomainValidationResponse], error)
	// Verify Organization Domain
	//
	// Make sure you have added the required verification to your domain, depending on the method you have chosen (HTTP or DNS challenge). ZITADEL will check it and set the domain as verified if it was successful. A verify domain has to be unique.
	//
	// Required permission:
	//   - `org.write`
	VerifyOrganizationDomain(context.Context, *connect.Request[v2beta.VerifyOrganizationDomainRequest]) (*connect.Response[v2beta.VerifyOrganizationDomainResponse], error)
	// Deactivate Organization
	//
	// Sets the state of my organization to deactivated. Users of this organization will not be able to log in.
	//
	// Required permission:
	//   - `org.write`
	DeactivateOrganization(context.Context, *connect.Request[v2beta.DeactivateOrganizationRequest]) (*connect.Response[v2beta.DeactivateOrganizationResponse], error)
	// Activate Organization
	//
	// Set the state of my organization to active. The state of the organization has to be deactivated to perform the request. Users of this organization will be able to log in again.
	//
	// Required permission:
	//   - `org.write`
	ActivateOrganization(context.Context, *connect.Request[v2beta.ActivateOrganizationRequest]) (*connect.Response[v2beta.ActivateOrganizationResponse], error)
}

// NewOrganizationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrganizationServiceHandler(svc OrganizationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	organizationServiceMethods := v2beta.File_zitadel_org_v2beta_org_service_proto.Services().ByName("OrganizationService").Methods()
	organizationServiceCreateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceCreateOrganizationProcedure,
		svc.CreateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("CreateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceUpdateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceUpdateOrganizationProcedure,
		svc.UpdateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("UpdateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationsHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationsProcedure,
		svc.ListOrganizations,
		connect.WithSchema(organizationServiceMethods.ByName("ListOrganizations")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteOrganizationProcedure,
		svc.DeleteOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceSetOrganizationMetadataHandler := connect.NewUnaryHandler(
		OrganizationServiceSetOrganizationMetadataProcedure,
		svc.SetOrganizationMetadata,
		connect.WithSchema(organizationServiceMethods.ByName("SetOrganizationMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationMetadataHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationMetadataProcedure,
		svc.ListOrganizationMetadata,
		connect.WithSchema(organizationServiceMethods.ByName("ListOrganizationMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteOrganizationMetadataHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteOrganizationMetadataProcedure,
		svc.DeleteOrganizationMetadata,
		connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganizationMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceAddOrganizationDomainHandler := connect.NewUnaryHandler(
		OrganizationServiceAddOrganizationDomainProcedure,
		svc.AddOrganizationDomain,
		connect.WithSchema(organizationServiceMethods.ByName("AddOrganizationDomain")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceListOrganizationDomainsHandler := connect.NewUnaryHandler(
		OrganizationServiceListOrganizationDomainsProcedure,
		svc.ListOrganizationDomains,
		connect.WithSchema(organizationServiceMethods.ByName("ListOrganizationDomains")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeleteOrganizationDomainHandler := connect.NewUnaryHandler(
		OrganizationServiceDeleteOrganizationDomainProcedure,
		svc.DeleteOrganizationDomain,
		connect.WithSchema(organizationServiceMethods.ByName("DeleteOrganizationDomain")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceGenerateOrganizationDomainValidationHandler := connect.NewUnaryHandler(
		OrganizationServiceGenerateOrganizationDomainValidationProcedure,
		svc.GenerateOrganizationDomainValidation,
		connect.WithSchema(organizationServiceMethods.ByName("GenerateOrganizationDomainValidation")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceVerifyOrganizationDomainHandler := connect.NewUnaryHandler(
		OrganizationServiceVerifyOrganizationDomainProcedure,
		svc.VerifyOrganizationDomain,
		connect.WithSchema(organizationServiceMethods.ByName("VerifyOrganizationDomain")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceDeactivateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceDeactivateOrganizationProcedure,
		svc.DeactivateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("DeactivateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	organizationServiceActivateOrganizationHandler := connect.NewUnaryHandler(
		OrganizationServiceActivateOrganizationProcedure,
		svc.ActivateOrganization,
		connect.WithSchema(organizationServiceMethods.ByName("ActivateOrganization")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zitadel.org.v2beta.OrganizationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrganizationServiceCreateOrganizationProcedure:
			organizationServiceCreateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceUpdateOrganizationProcedure:
			organizationServiceUpdateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationsProcedure:
			organizationServiceListOrganizationsHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteOrganizationProcedure:
			organizationServiceDeleteOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceSetOrganizationMetadataProcedure:
			organizationServiceSetOrganizationMetadataHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationMetadataProcedure:
			organizationServiceListOrganizationMetadataHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteOrganizationMetadataProcedure:
			organizationServiceDeleteOrganizationMetadataHandler.ServeHTTP(w, r)
		case OrganizationServiceAddOrganizationDomainProcedure:
			organizationServiceAddOrganizationDomainHandler.ServeHTTP(w, r)
		case OrganizationServiceListOrganizationDomainsProcedure:
			organizationServiceListOrganizationDomainsHandler.ServeHTTP(w, r)
		case OrganizationServiceDeleteOrganizationDomainProcedure:
			organizationServiceDeleteOrganizationDomainHandler.ServeHTTP(w, r)
		case OrganizationServiceGenerateOrganizationDomainValidationProcedure:
			organizationServiceGenerateOrganizationDomainValidationHandler.ServeHTTP(w, r)
		case OrganizationServiceVerifyOrganizationDomainProcedure:
			organizationServiceVerifyOrganizationDomainHandler.ServeHTTP(w, r)
		case OrganizationServiceDeactivateOrganizationProcedure:
			organizationServiceDeactivateOrganizationHandler.ServeHTTP(w, r)
		case OrganizationServiceActivateOrganizationProcedure:
			organizationServiceActivateOrganizationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrganizationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrganizationServiceHandler struct{}

func (UnimplementedOrganizationServiceHandler) CreateOrganization(context.Context, *connect.Request[v2beta.CreateOrganizationRequest]) (*connect.Response[v2beta.CreateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.CreateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) UpdateOrganization(context.Context, *connect.Request[v2beta.UpdateOrganizationRequest]) (*connect.Response[v2beta.UpdateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.UpdateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganizations(context.Context, *connect.Request[v2beta.ListOrganizationsRequest]) (*connect.Response[v2beta.ListOrganizationsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.ListOrganizations is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteOrganization(context.Context, *connect.Request[v2beta.DeleteOrganizationRequest]) (*connect.Response[v2beta.DeleteOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.DeleteOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) SetOrganizationMetadata(context.Context, *connect.Request[v2beta.SetOrganizationMetadataRequest]) (*connect.Response[v2beta.SetOrganizationMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.SetOrganizationMetadata is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganizationMetadata(context.Context, *connect.Request[v2beta.ListOrganizationMetadataRequest]) (*connect.Response[v2beta.ListOrganizationMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.ListOrganizationMetadata is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteOrganizationMetadata(context.Context, *connect.Request[v2beta.DeleteOrganizationMetadataRequest]) (*connect.Response[v2beta.DeleteOrganizationMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.DeleteOrganizationMetadata is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) AddOrganizationDomain(context.Context, *connect.Request[v2beta.AddOrganizationDomainRequest]) (*connect.Response[v2beta.AddOrganizationDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.AddOrganizationDomain is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ListOrganizationDomains(context.Context, *connect.Request[v2beta.ListOrganizationDomainsRequest]) (*connect.Response[v2beta.ListOrganizationDomainsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.ListOrganizationDomains is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeleteOrganizationDomain(context.Context, *connect.Request[v2beta.DeleteOrganizationDomainRequest]) (*connect.Response[v2beta.DeleteOrganizationDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.DeleteOrganizationDomain is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) GenerateOrganizationDomainValidation(context.Context, *connect.Request[v2beta.GenerateOrganizationDomainValidationRequest]) (*connect.Response[v2beta.GenerateOrganizationDomainValidationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.GenerateOrganizationDomainValidation is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) VerifyOrganizationDomain(context.Context, *connect.Request[v2beta.VerifyOrganizationDomainRequest]) (*connect.Response[v2beta.VerifyOrganizationDomainResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.VerifyOrganizationDomain is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) DeactivateOrganization(context.Context, *connect.Request[v2beta.DeactivateOrganizationRequest]) (*connect.Response[v2beta.DeactivateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.DeactivateOrganization is not implemented"))
}

func (UnimplementedOrganizationServiceHandler) ActivateOrganization(context.Context, *connect.Request[v2beta.ActivateOrganizationRequest]) (*connect.Response[v2beta.ActivateOrganizationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.org.v2beta.OrganizationService.ActivateOrganization is not implemented"))
}
