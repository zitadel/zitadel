// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/webkey/v2beta/webkey_service.proto

package webkeyconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/webkey/v2beta"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WebKeyServiceName is the fully-qualified name of the WebKeyService service.
	WebKeyServiceName = "zitadel.webkey.v2beta.WebKeyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WebKeyServiceCreateWebKeyProcedure is the fully-qualified name of the WebKeyService's
	// CreateWebKey RPC.
	WebKeyServiceCreateWebKeyProcedure = "/zitadel.webkey.v2beta.WebKeyService/CreateWebKey"
	// WebKeyServiceActivateWebKeyProcedure is the fully-qualified name of the WebKeyService's
	// ActivateWebKey RPC.
	WebKeyServiceActivateWebKeyProcedure = "/zitadel.webkey.v2beta.WebKeyService/ActivateWebKey"
	// WebKeyServiceDeleteWebKeyProcedure is the fully-qualified name of the WebKeyService's
	// DeleteWebKey RPC.
	WebKeyServiceDeleteWebKeyProcedure = "/zitadel.webkey.v2beta.WebKeyService/DeleteWebKey"
	// WebKeyServiceListWebKeysProcedure is the fully-qualified name of the WebKeyService's ListWebKeys
	// RPC.
	WebKeyServiceListWebKeysProcedure = "/zitadel.webkey.v2beta.WebKeyService/ListWebKeys"
)

// WebKeyServiceClient is a client for the zitadel.webkey.v2beta.WebKeyService service.
type WebKeyServiceClient interface {
	// Create Web Key
	//
	// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
	// The public key can be used to validate OIDC tokens.
	// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	//
	// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	CreateWebKey(context.Context, *connect.Request[v2beta.CreateWebKeyRequest]) (*connect.Response[v2beta.CreateWebKeyResponse], error)
	// Activate Web Key
	//
	// Switch the active signing web key. The previously active key will be deactivated.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
	// as the public key may not have been propagated to caches and clients yet.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	ActivateWebKey(context.Context, *connect.Request[v2beta.ActivateWebKeyRequest]) (*connect.Response[v2beta.ActivateWebKeyResponse], error)
	// Delete Web Key
	//
	// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
	// any tokens signed by this key will be invalid.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// In case the web key is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the web key was deleted during the request.
	//
	// Required permission:
	//   - `iam.web_key.delete`
	//
	// Required feature flag:
	//   - `web_key`
	DeleteWebKey(context.Context, *connect.Request[v2beta.DeleteWebKeyRequest]) (*connect.Response[v2beta.DeleteWebKeyResponse], error)
	// List Web Keys
	//
	// List all web keys and their states.
	//
	// Required permission:
	//   - `iam.web_key.read`
	//
	// Required feature flag:
	//   - `web_key`
	ListWebKeys(context.Context, *connect.Request[v2beta.ListWebKeysRequest]) (*connect.Response[v2beta.ListWebKeysResponse], error)
}

// NewWebKeyServiceClient constructs a client for the zitadel.webkey.v2beta.WebKeyService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWebKeyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WebKeyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	webKeyServiceMethods := v2beta.File_zitadel_webkey_v2beta_webkey_service_proto.Services().ByName("WebKeyService").Methods()
	return &webKeyServiceClient{
		createWebKey: connect.NewClient[v2beta.CreateWebKeyRequest, v2beta.CreateWebKeyResponse](
			httpClient,
			baseURL+WebKeyServiceCreateWebKeyProcedure,
			connect.WithSchema(webKeyServiceMethods.ByName("CreateWebKey")),
			connect.WithClientOptions(opts...),
		),
		activateWebKey: connect.NewClient[v2beta.ActivateWebKeyRequest, v2beta.ActivateWebKeyResponse](
			httpClient,
			baseURL+WebKeyServiceActivateWebKeyProcedure,
			connect.WithSchema(webKeyServiceMethods.ByName("ActivateWebKey")),
			connect.WithClientOptions(opts...),
		),
		deleteWebKey: connect.NewClient[v2beta.DeleteWebKeyRequest, v2beta.DeleteWebKeyResponse](
			httpClient,
			baseURL+WebKeyServiceDeleteWebKeyProcedure,
			connect.WithSchema(webKeyServiceMethods.ByName("DeleteWebKey")),
			connect.WithClientOptions(opts...),
		),
		listWebKeys: connect.NewClient[v2beta.ListWebKeysRequest, v2beta.ListWebKeysResponse](
			httpClient,
			baseURL+WebKeyServiceListWebKeysProcedure,
			connect.WithSchema(webKeyServiceMethods.ByName("ListWebKeys")),
			connect.WithClientOptions(opts...),
		),
	}
}

// webKeyServiceClient implements WebKeyServiceClient.
type webKeyServiceClient struct {
	createWebKey   *connect.Client[v2beta.CreateWebKeyRequest, v2beta.CreateWebKeyResponse]
	activateWebKey *connect.Client[v2beta.ActivateWebKeyRequest, v2beta.ActivateWebKeyResponse]
	deleteWebKey   *connect.Client[v2beta.DeleteWebKeyRequest, v2beta.DeleteWebKeyResponse]
	listWebKeys    *connect.Client[v2beta.ListWebKeysRequest, v2beta.ListWebKeysResponse]
}

// CreateWebKey calls zitadel.webkey.v2beta.WebKeyService.CreateWebKey.
func (c *webKeyServiceClient) CreateWebKey(ctx context.Context, req *connect.Request[v2beta.CreateWebKeyRequest]) (*connect.Response[v2beta.CreateWebKeyResponse], error) {
	return c.createWebKey.CallUnary(ctx, req)
}

// ActivateWebKey calls zitadel.webkey.v2beta.WebKeyService.ActivateWebKey.
func (c *webKeyServiceClient) ActivateWebKey(ctx context.Context, req *connect.Request[v2beta.ActivateWebKeyRequest]) (*connect.Response[v2beta.ActivateWebKeyResponse], error) {
	return c.activateWebKey.CallUnary(ctx, req)
}

// DeleteWebKey calls zitadel.webkey.v2beta.WebKeyService.DeleteWebKey.
func (c *webKeyServiceClient) DeleteWebKey(ctx context.Context, req *connect.Request[v2beta.DeleteWebKeyRequest]) (*connect.Response[v2beta.DeleteWebKeyResponse], error) {
	return c.deleteWebKey.CallUnary(ctx, req)
}

// ListWebKeys calls zitadel.webkey.v2beta.WebKeyService.ListWebKeys.
func (c *webKeyServiceClient) ListWebKeys(ctx context.Context, req *connect.Request[v2beta.ListWebKeysRequest]) (*connect.Response[v2beta.ListWebKeysResponse], error) {
	return c.listWebKeys.CallUnary(ctx, req)
}

// WebKeyServiceHandler is an implementation of the zitadel.webkey.v2beta.WebKeyService service.
type WebKeyServiceHandler interface {
	// Create Web Key
	//
	// Generate a private and public key pair. The private key can be used to sign OIDC tokens after activation.
	// The public key can be used to validate OIDC tokens.
	// The newly created key will have the state `STATE_INITIAL` and is published to the public key endpoint.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	//
	// If no key type is provided, a RSA key pair with 2048 bits and SHA256 hashing will be created.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	CreateWebKey(context.Context, *connect.Request[v2beta.CreateWebKeyRequest]) (*connect.Response[v2beta.CreateWebKeyResponse], error)
	// Activate Web Key
	//
	// Switch the active signing web key. The previously active key will be deactivated.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// Therefore it is not advised to activate a key that has been created within the cache duration (default is 5min),
	// as the public key may not have been propagated to caches and clients yet.
	//
	// Required permission:
	//   - `iam.web_key.write`
	//
	// Required feature flag:
	//   - `web_key`
	ActivateWebKey(context.Context, *connect.Request[v2beta.ActivateWebKeyRequest]) (*connect.Response[v2beta.ActivateWebKeyResponse], error)
	// Delete Web Key
	//
	// Delete a web key pair. Only inactive keys can be deleted. Once a key is deleted,
	// any tokens signed by this key will be invalid.
	// Note that the JWKs OIDC endpoint returns a cacheable response.
	// In case the web key is not found, the request will return a successful response as
	// the desired state is already achieved.
	// You can check the change date in the response to verify if the web key was deleted during the request.
	//
	// Required permission:
	//   - `iam.web_key.delete`
	//
	// Required feature flag:
	//   - `web_key`
	DeleteWebKey(context.Context, *connect.Request[v2beta.DeleteWebKeyRequest]) (*connect.Response[v2beta.DeleteWebKeyResponse], error)
	// List Web Keys
	//
	// List all web keys and their states.
	//
	// Required permission:
	//   - `iam.web_key.read`
	//
	// Required feature flag:
	//   - `web_key`
	ListWebKeys(context.Context, *connect.Request[v2beta.ListWebKeysRequest]) (*connect.Response[v2beta.ListWebKeysResponse], error)
}

// NewWebKeyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWebKeyServiceHandler(svc WebKeyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	webKeyServiceMethods := v2beta.File_zitadel_webkey_v2beta_webkey_service_proto.Services().ByName("WebKeyService").Methods()
	webKeyServiceCreateWebKeyHandler := connect.NewUnaryHandler(
		WebKeyServiceCreateWebKeyProcedure,
		svc.CreateWebKey,
		connect.WithSchema(webKeyServiceMethods.ByName("CreateWebKey")),
		connect.WithHandlerOptions(opts...),
	)
	webKeyServiceActivateWebKeyHandler := connect.NewUnaryHandler(
		WebKeyServiceActivateWebKeyProcedure,
		svc.ActivateWebKey,
		connect.WithSchema(webKeyServiceMethods.ByName("ActivateWebKey")),
		connect.WithHandlerOptions(opts...),
	)
	webKeyServiceDeleteWebKeyHandler := connect.NewUnaryHandler(
		WebKeyServiceDeleteWebKeyProcedure,
		svc.DeleteWebKey,
		connect.WithSchema(webKeyServiceMethods.ByName("DeleteWebKey")),
		connect.WithHandlerOptions(opts...),
	)
	webKeyServiceListWebKeysHandler := connect.NewUnaryHandler(
		WebKeyServiceListWebKeysProcedure,
		svc.ListWebKeys,
		connect.WithSchema(webKeyServiceMethods.ByName("ListWebKeys")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zitadel.webkey.v2beta.WebKeyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WebKeyServiceCreateWebKeyProcedure:
			webKeyServiceCreateWebKeyHandler.ServeHTTP(w, r)
		case WebKeyServiceActivateWebKeyProcedure:
			webKeyServiceActivateWebKeyHandler.ServeHTTP(w, r)
		case WebKeyServiceDeleteWebKeyProcedure:
			webKeyServiceDeleteWebKeyHandler.ServeHTTP(w, r)
		case WebKeyServiceListWebKeysProcedure:
			webKeyServiceListWebKeysHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWebKeyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWebKeyServiceHandler struct{}

func (UnimplementedWebKeyServiceHandler) CreateWebKey(context.Context, *connect.Request[v2beta.CreateWebKeyRequest]) (*connect.Response[v2beta.CreateWebKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.webkey.v2beta.WebKeyService.CreateWebKey is not implemented"))
}

func (UnimplementedWebKeyServiceHandler) ActivateWebKey(context.Context, *connect.Request[v2beta.ActivateWebKeyRequest]) (*connect.Response[v2beta.ActivateWebKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.webkey.v2beta.WebKeyService.ActivateWebKey is not implemented"))
}

func (UnimplementedWebKeyServiceHandler) DeleteWebKey(context.Context, *connect.Request[v2beta.DeleteWebKeyRequest]) (*connect.Response[v2beta.DeleteWebKeyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.webkey.v2beta.WebKeyService.DeleteWebKey is not implemented"))
}

func (UnimplementedWebKeyServiceHandler) ListWebKeys(context.Context, *connect.Request[v2beta.ListWebKeysRequest]) (*connect.Response[v2beta.ListWebKeysResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.webkey.v2beta.WebKeyService.ListWebKeys is not implemented"))
}
