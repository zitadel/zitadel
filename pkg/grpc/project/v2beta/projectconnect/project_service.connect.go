// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/project/v2beta/project_service.proto

package projectconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/project/v2beta"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "zitadel.project.v2beta.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/zitadel.project.v2beta.ProjectService/CreateProject"
	// ProjectServiceUpdateProjectProcedure is the fully-qualified name of the ProjectService's
	// UpdateProject RPC.
	ProjectServiceUpdateProjectProcedure = "/zitadel.project.v2beta.ProjectService/UpdateProject"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/zitadel.project.v2beta.ProjectService/DeleteProject"
	// ProjectServiceGetProjectProcedure is the fully-qualified name of the ProjectService's GetProject
	// RPC.
	ProjectServiceGetProjectProcedure = "/zitadel.project.v2beta.ProjectService/GetProject"
	// ProjectServiceListProjectsProcedure is the fully-qualified name of the ProjectService's
	// ListProjects RPC.
	ProjectServiceListProjectsProcedure = "/zitadel.project.v2beta.ProjectService/ListProjects"
	// ProjectServiceDeactivateProjectProcedure is the fully-qualified name of the ProjectService's
	// DeactivateProject RPC.
	ProjectServiceDeactivateProjectProcedure = "/zitadel.project.v2beta.ProjectService/DeactivateProject"
	// ProjectServiceActivateProjectProcedure is the fully-qualified name of the ProjectService's
	// ActivateProject RPC.
	ProjectServiceActivateProjectProcedure = "/zitadel.project.v2beta.ProjectService/ActivateProject"
	// ProjectServiceAddProjectRoleProcedure is the fully-qualified name of the ProjectService's
	// AddProjectRole RPC.
	ProjectServiceAddProjectRoleProcedure = "/zitadel.project.v2beta.ProjectService/AddProjectRole"
	// ProjectServiceUpdateProjectRoleProcedure is the fully-qualified name of the ProjectService's
	// UpdateProjectRole RPC.
	ProjectServiceUpdateProjectRoleProcedure = "/zitadel.project.v2beta.ProjectService/UpdateProjectRole"
	// ProjectServiceRemoveProjectRoleProcedure is the fully-qualified name of the ProjectService's
	// RemoveProjectRole RPC.
	ProjectServiceRemoveProjectRoleProcedure = "/zitadel.project.v2beta.ProjectService/RemoveProjectRole"
	// ProjectServiceListProjectRolesProcedure is the fully-qualified name of the ProjectService's
	// ListProjectRoles RPC.
	ProjectServiceListProjectRolesProcedure = "/zitadel.project.v2beta.ProjectService/ListProjectRoles"
	// ProjectServiceCreateProjectGrantProcedure is the fully-qualified name of the ProjectService's
	// CreateProjectGrant RPC.
	ProjectServiceCreateProjectGrantProcedure = "/zitadel.project.v2beta.ProjectService/CreateProjectGrant"
	// ProjectServiceUpdateProjectGrantProcedure is the fully-qualified name of the ProjectService's
	// UpdateProjectGrant RPC.
	ProjectServiceUpdateProjectGrantProcedure = "/zitadel.project.v2beta.ProjectService/UpdateProjectGrant"
	// ProjectServiceDeleteProjectGrantProcedure is the fully-qualified name of the ProjectService's
	// DeleteProjectGrant RPC.
	ProjectServiceDeleteProjectGrantProcedure = "/zitadel.project.v2beta.ProjectService/DeleteProjectGrant"
	// ProjectServiceDeactivateProjectGrantProcedure is the fully-qualified name of the ProjectService's
	// DeactivateProjectGrant RPC.
	ProjectServiceDeactivateProjectGrantProcedure = "/zitadel.project.v2beta.ProjectService/DeactivateProjectGrant"
	// ProjectServiceActivateProjectGrantProcedure is the fully-qualified name of the ProjectService's
	// ActivateProjectGrant RPC.
	ProjectServiceActivateProjectGrantProcedure = "/zitadel.project.v2beta.ProjectService/ActivateProjectGrant"
	// ProjectServiceListProjectGrantsProcedure is the fully-qualified name of the ProjectService's
	// ListProjectGrants RPC.
	ProjectServiceListProjectGrantsProcedure = "/zitadel.project.v2beta.ProjectService/ListProjectGrants"
)

// ProjectServiceClient is a client for the zitadel.project.v2beta.ProjectService service.
type ProjectServiceClient interface {
	// Create Project
	//
	// Create a new Project.
	//
	// Required permission:
	//   - `project.create`
	CreateProject(context.Context, *connect.Request[v2beta.CreateProjectRequest]) (*connect.Response[v2beta.CreateProjectResponse], error)
	// Update Project
	//
	// Update an existing project.
	//
	// Required permission:
	//   - `project.write`
	UpdateProject(context.Context, *connect.Request[v2beta.UpdateProjectRequest]) (*connect.Response[v2beta.UpdateProjectResponse], error)
	// Delete Project
	//
	// Delete an existing project.
	// In case the project is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.delete`
	DeleteProject(context.Context, *connect.Request[v2beta.DeleteProjectRequest]) (*connect.Response[v2beta.DeleteProjectResponse], error)
	// Get Project
	//
	// Returns the project identified by the requested ID.
	//
	// Required permission:
	//   - `project.read`
	GetProject(context.Context, *connect.Request[v2beta.GetProjectRequest]) (*connect.Response[v2beta.GetProjectResponse], error)
	// List Projects
	//
	// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - `project.read`
	ListProjects(context.Context, *connect.Request[v2beta.ListProjectsRequest]) (*connect.Response[v2beta.ListProjectsResponse], error)
	// Deactivate Project
	//
	// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
	// Applications under deactivated projects are not able to login anymore.
	//
	// Required permission:
	//   - `project.write`
	DeactivateProject(context.Context, *connect.Request[v2beta.DeactivateProjectRequest]) (*connect.Response[v2beta.DeactivateProjectResponse], error)
	// Activate Project
	//
	// Set the state of a project to active. Request returns no error if the project is already activated.
	//
	// Required permission:
	//   - `project.write`
	ActivateProject(context.Context, *connect.Request[v2beta.ActivateProjectRequest]) (*connect.Response[v2beta.ActivateProjectResponse], error)
	// Add Project Role
	//
	// Add a new project role to a project. The key must be unique within the project.
	//
	// Required permission:
	//   - `project.role.write`
	AddProjectRole(context.Context, *connect.Request[v2beta.AddProjectRoleRequest]) (*connect.Response[v2beta.AddProjectRoleResponse], error)
	// Update Project Role
	//
	// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
	//
	// Required permission:
	//   - `project.role.write`
	UpdateProjectRole(context.Context, *connect.Request[v2beta.UpdateProjectRoleRequest]) (*connect.Response[v2beta.UpdateProjectRoleResponse], error)
	// Remove Project Role
	//
	// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
	//
	// Required permission:
	//   - `project.role.write`
	RemoveProjectRole(context.Context, *connect.Request[v2beta.RemoveProjectRoleRequest]) (*connect.Response[v2beta.RemoveProjectRoleResponse], error)
	// List Project Roles
	//
	// Returns all roles of a project matching the search query.
	//
	// Required permission:
	//   - `project.role.read`
	ListProjectRoles(context.Context, *connect.Request[v2beta.ListProjectRolesRequest]) (*connect.Response[v2beta.ListProjectRolesResponse], error)
	// Create Project Grant
	//
	// Grant a project to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.create`
	CreateProjectGrant(context.Context, *connect.Request[v2beta.CreateProjectGrantRequest]) (*connect.Response[v2beta.CreateProjectGrantResponse], error)
	// Update Project Grant
	//
	// Change the roles of the project that is granted to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.write`
	UpdateProjectGrant(context.Context, *connect.Request[v2beta.UpdateProjectGrantRequest]) (*connect.Response[v2beta.UpdateProjectGrantResponse], error)
	// Delete Project Grant
	//
	// Delete a project grant. All user grants for this project grant will also be removed.
	// A user will not have access to the project afterward (if permissions are checked).
	// In case the project grant is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.grant.delete`
	DeleteProjectGrant(context.Context, *connect.Request[v2beta.DeleteProjectGrantRequest]) (*connect.Response[v2beta.DeleteProjectGrantResponse], error)
	// Deactivate Project Grant
	//
	// Set the state of the project grant to deactivated.
	// Applications under deactivated projects grants are not able to login anymore.
	//
	// Required permission:
	//   - `project.grant.write`
	DeactivateProjectGrant(context.Context, *connect.Request[v2beta.DeactivateProjectGrantRequest]) (*connect.Response[v2beta.DeactivateProjectGrantResponse], error)
	// Activate Project Grant
	//
	// Set the state of the project grant to activated.
	//
	// Required permission:
	//   - `project.grant.write`
	ActivateProjectGrant(context.Context, *connect.Request[v2beta.ActivateProjectGrantRequest]) (*connect.Response[v2beta.ActivateProjectGrantResponse], error)
	// List Project Grants
	//
	// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
	//
	// Required permission:
	//   - `project.grant.write`
	ListProjectGrants(context.Context, *connect.Request[v2beta.ListProjectGrantsRequest]) (*connect.Response[v2beta.ListProjectGrantsResponse], error)
}

// NewProjectServiceClient constructs a client for the zitadel.project.v2beta.ProjectService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectServiceMethods := v2beta.File_zitadel_project_v2beta_project_service_proto.Services().ByName("ProjectService").Methods()
	return &projectServiceClient{
		createProject: connect.NewClient[v2beta.CreateProjectRequest, v2beta.CreateProjectResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v2beta.UpdateProjectRequest, v2beta.UpdateProjectResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v2beta.DeleteProjectRequest, v2beta.DeleteProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
			connect.WithClientOptions(opts...),
		),
		getProject: connect.NewClient[v2beta.GetProjectRequest, v2beta.GetProjectResponse](
			httpClient,
			baseURL+ProjectServiceGetProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v2beta.ListProjectsRequest, v2beta.ListProjectsResponse](
			httpClient,
			baseURL+ProjectServiceListProjectsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjects")),
			connect.WithClientOptions(opts...),
		),
		deactivateProject: connect.NewClient[v2beta.DeactivateProjectRequest, v2beta.DeactivateProjectResponse](
			httpClient,
			baseURL+ProjectServiceDeactivateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeactivateProject")),
			connect.WithClientOptions(opts...),
		),
		activateProject: connect.NewClient[v2beta.ActivateProjectRequest, v2beta.ActivateProjectResponse](
			httpClient,
			baseURL+ProjectServiceActivateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ActivateProject")),
			connect.WithClientOptions(opts...),
		),
		addProjectRole: connect.NewClient[v2beta.AddProjectRoleRequest, v2beta.AddProjectRoleResponse](
			httpClient,
			baseURL+ProjectServiceAddProjectRoleProcedure,
			connect.WithSchema(projectServiceMethods.ByName("AddProjectRole")),
			connect.WithClientOptions(opts...),
		),
		updateProjectRole: connect.NewClient[v2beta.UpdateProjectRoleRequest, v2beta.UpdateProjectRoleResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectRoleProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProjectRole")),
			connect.WithClientOptions(opts...),
		),
		removeProjectRole: connect.NewClient[v2beta.RemoveProjectRoleRequest, v2beta.RemoveProjectRoleResponse](
			httpClient,
			baseURL+ProjectServiceRemoveProjectRoleProcedure,
			connect.WithSchema(projectServiceMethods.ByName("RemoveProjectRole")),
			connect.WithClientOptions(opts...),
		),
		listProjectRoles: connect.NewClient[v2beta.ListProjectRolesRequest, v2beta.ListProjectRolesResponse](
			httpClient,
			baseURL+ProjectServiceListProjectRolesProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjectRoles")),
			connect.WithClientOptions(opts...),
		),
		createProjectGrant: connect.NewClient[v2beta.CreateProjectGrantRequest, v2beta.CreateProjectGrantResponse](
			httpClient,
			baseURL+ProjectServiceCreateProjectGrantProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProjectGrant")),
			connect.WithClientOptions(opts...),
		),
		updateProjectGrant: connect.NewClient[v2beta.UpdateProjectGrantRequest, v2beta.UpdateProjectGrantResponse](
			httpClient,
			baseURL+ProjectServiceUpdateProjectGrantProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProjectGrant")),
			connect.WithClientOptions(opts...),
		),
		deleteProjectGrant: connect.NewClient[v2beta.DeleteProjectGrantRequest, v2beta.DeleteProjectGrantResponse](
			httpClient,
			baseURL+ProjectServiceDeleteProjectGrantProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProjectGrant")),
			connect.WithClientOptions(opts...),
		),
		deactivateProjectGrant: connect.NewClient[v2beta.DeactivateProjectGrantRequest, v2beta.DeactivateProjectGrantResponse](
			httpClient,
			baseURL+ProjectServiceDeactivateProjectGrantProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeactivateProjectGrant")),
			connect.WithClientOptions(opts...),
		),
		activateProjectGrant: connect.NewClient[v2beta.ActivateProjectGrantRequest, v2beta.ActivateProjectGrantResponse](
			httpClient,
			baseURL+ProjectServiceActivateProjectGrantProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ActivateProjectGrant")),
			connect.WithClientOptions(opts...),
		),
		listProjectGrants: connect.NewClient[v2beta.ListProjectGrantsRequest, v2beta.ListProjectGrantsResponse](
			httpClient,
			baseURL+ProjectServiceListProjectGrantsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjectGrants")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	createProject          *connect.Client[v2beta.CreateProjectRequest, v2beta.CreateProjectResponse]
	updateProject          *connect.Client[v2beta.UpdateProjectRequest, v2beta.UpdateProjectResponse]
	deleteProject          *connect.Client[v2beta.DeleteProjectRequest, v2beta.DeleteProjectResponse]
	getProject             *connect.Client[v2beta.GetProjectRequest, v2beta.GetProjectResponse]
	listProjects           *connect.Client[v2beta.ListProjectsRequest, v2beta.ListProjectsResponse]
	deactivateProject      *connect.Client[v2beta.DeactivateProjectRequest, v2beta.DeactivateProjectResponse]
	activateProject        *connect.Client[v2beta.ActivateProjectRequest, v2beta.ActivateProjectResponse]
	addProjectRole         *connect.Client[v2beta.AddProjectRoleRequest, v2beta.AddProjectRoleResponse]
	updateProjectRole      *connect.Client[v2beta.UpdateProjectRoleRequest, v2beta.UpdateProjectRoleResponse]
	removeProjectRole      *connect.Client[v2beta.RemoveProjectRoleRequest, v2beta.RemoveProjectRoleResponse]
	listProjectRoles       *connect.Client[v2beta.ListProjectRolesRequest, v2beta.ListProjectRolesResponse]
	createProjectGrant     *connect.Client[v2beta.CreateProjectGrantRequest, v2beta.CreateProjectGrantResponse]
	updateProjectGrant     *connect.Client[v2beta.UpdateProjectGrantRequest, v2beta.UpdateProjectGrantResponse]
	deleteProjectGrant     *connect.Client[v2beta.DeleteProjectGrantRequest, v2beta.DeleteProjectGrantResponse]
	deactivateProjectGrant *connect.Client[v2beta.DeactivateProjectGrantRequest, v2beta.DeactivateProjectGrantResponse]
	activateProjectGrant   *connect.Client[v2beta.ActivateProjectGrantRequest, v2beta.ActivateProjectGrantResponse]
	listProjectGrants      *connect.Client[v2beta.ListProjectGrantsRequest, v2beta.ListProjectGrantsResponse]
}

// CreateProject calls zitadel.project.v2beta.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect.Request[v2beta.CreateProjectRequest]) (*connect.Response[v2beta.CreateProjectResponse], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls zitadel.project.v2beta.ProjectService.UpdateProject.
func (c *projectServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v2beta.UpdateProjectRequest]) (*connect.Response[v2beta.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls zitadel.project.v2beta.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v2beta.DeleteProjectRequest]) (*connect.Response[v2beta.DeleteProjectResponse], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// GetProject calls zitadel.project.v2beta.ProjectService.GetProject.
func (c *projectServiceClient) GetProject(ctx context.Context, req *connect.Request[v2beta.GetProjectRequest]) (*connect.Response[v2beta.GetProjectResponse], error) {
	return c.getProject.CallUnary(ctx, req)
}

// ListProjects calls zitadel.project.v2beta.ProjectService.ListProjects.
func (c *projectServiceClient) ListProjects(ctx context.Context, req *connect.Request[v2beta.ListProjectsRequest]) (*connect.Response[v2beta.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// DeactivateProject calls zitadel.project.v2beta.ProjectService.DeactivateProject.
func (c *projectServiceClient) DeactivateProject(ctx context.Context, req *connect.Request[v2beta.DeactivateProjectRequest]) (*connect.Response[v2beta.DeactivateProjectResponse], error) {
	return c.deactivateProject.CallUnary(ctx, req)
}

// ActivateProject calls zitadel.project.v2beta.ProjectService.ActivateProject.
func (c *projectServiceClient) ActivateProject(ctx context.Context, req *connect.Request[v2beta.ActivateProjectRequest]) (*connect.Response[v2beta.ActivateProjectResponse], error) {
	return c.activateProject.CallUnary(ctx, req)
}

// AddProjectRole calls zitadel.project.v2beta.ProjectService.AddProjectRole.
func (c *projectServiceClient) AddProjectRole(ctx context.Context, req *connect.Request[v2beta.AddProjectRoleRequest]) (*connect.Response[v2beta.AddProjectRoleResponse], error) {
	return c.addProjectRole.CallUnary(ctx, req)
}

// UpdateProjectRole calls zitadel.project.v2beta.ProjectService.UpdateProjectRole.
func (c *projectServiceClient) UpdateProjectRole(ctx context.Context, req *connect.Request[v2beta.UpdateProjectRoleRequest]) (*connect.Response[v2beta.UpdateProjectRoleResponse], error) {
	return c.updateProjectRole.CallUnary(ctx, req)
}

// RemoveProjectRole calls zitadel.project.v2beta.ProjectService.RemoveProjectRole.
func (c *projectServiceClient) RemoveProjectRole(ctx context.Context, req *connect.Request[v2beta.RemoveProjectRoleRequest]) (*connect.Response[v2beta.RemoveProjectRoleResponse], error) {
	return c.removeProjectRole.CallUnary(ctx, req)
}

// ListProjectRoles calls zitadel.project.v2beta.ProjectService.ListProjectRoles.
func (c *projectServiceClient) ListProjectRoles(ctx context.Context, req *connect.Request[v2beta.ListProjectRolesRequest]) (*connect.Response[v2beta.ListProjectRolesResponse], error) {
	return c.listProjectRoles.CallUnary(ctx, req)
}

// CreateProjectGrant calls zitadel.project.v2beta.ProjectService.CreateProjectGrant.
func (c *projectServiceClient) CreateProjectGrant(ctx context.Context, req *connect.Request[v2beta.CreateProjectGrantRequest]) (*connect.Response[v2beta.CreateProjectGrantResponse], error) {
	return c.createProjectGrant.CallUnary(ctx, req)
}

// UpdateProjectGrant calls zitadel.project.v2beta.ProjectService.UpdateProjectGrant.
func (c *projectServiceClient) UpdateProjectGrant(ctx context.Context, req *connect.Request[v2beta.UpdateProjectGrantRequest]) (*connect.Response[v2beta.UpdateProjectGrantResponse], error) {
	return c.updateProjectGrant.CallUnary(ctx, req)
}

// DeleteProjectGrant calls zitadel.project.v2beta.ProjectService.DeleteProjectGrant.
func (c *projectServiceClient) DeleteProjectGrant(ctx context.Context, req *connect.Request[v2beta.DeleteProjectGrantRequest]) (*connect.Response[v2beta.DeleteProjectGrantResponse], error) {
	return c.deleteProjectGrant.CallUnary(ctx, req)
}

// DeactivateProjectGrant calls zitadel.project.v2beta.ProjectService.DeactivateProjectGrant.
func (c *projectServiceClient) DeactivateProjectGrant(ctx context.Context, req *connect.Request[v2beta.DeactivateProjectGrantRequest]) (*connect.Response[v2beta.DeactivateProjectGrantResponse], error) {
	return c.deactivateProjectGrant.CallUnary(ctx, req)
}

// ActivateProjectGrant calls zitadel.project.v2beta.ProjectService.ActivateProjectGrant.
func (c *projectServiceClient) ActivateProjectGrant(ctx context.Context, req *connect.Request[v2beta.ActivateProjectGrantRequest]) (*connect.Response[v2beta.ActivateProjectGrantResponse], error) {
	return c.activateProjectGrant.CallUnary(ctx, req)
}

// ListProjectGrants calls zitadel.project.v2beta.ProjectService.ListProjectGrants.
func (c *projectServiceClient) ListProjectGrants(ctx context.Context, req *connect.Request[v2beta.ListProjectGrantsRequest]) (*connect.Response[v2beta.ListProjectGrantsResponse], error) {
	return c.listProjectGrants.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the zitadel.project.v2beta.ProjectService service.
type ProjectServiceHandler interface {
	// Create Project
	//
	// Create a new Project.
	//
	// Required permission:
	//   - `project.create`
	CreateProject(context.Context, *connect.Request[v2beta.CreateProjectRequest]) (*connect.Response[v2beta.CreateProjectResponse], error)
	// Update Project
	//
	// Update an existing project.
	//
	// Required permission:
	//   - `project.write`
	UpdateProject(context.Context, *connect.Request[v2beta.UpdateProjectRequest]) (*connect.Response[v2beta.UpdateProjectResponse], error)
	// Delete Project
	//
	// Delete an existing project.
	// In case the project is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.delete`
	DeleteProject(context.Context, *connect.Request[v2beta.DeleteProjectRequest]) (*connect.Response[v2beta.DeleteProjectResponse], error)
	// Get Project
	//
	// Returns the project identified by the requested ID.
	//
	// Required permission:
	//   - `project.read`
	GetProject(context.Context, *connect.Request[v2beta.GetProjectRequest]) (*connect.Response[v2beta.GetProjectResponse], error)
	// List Projects
	//
	// List all matching projects. By default all projects of the instance that the caller has permission to read are returned.
	// Make sure to include a limit and sorting for pagination.
	//
	// Required permission:
	//   - `project.read`
	ListProjects(context.Context, *connect.Request[v2beta.ListProjectsRequest]) (*connect.Response[v2beta.ListProjectsResponse], error)
	// Deactivate Project
	//
	// Set the state of a project to deactivated. Request returns no error if the project is already deactivated.
	// Applications under deactivated projects are not able to login anymore.
	//
	// Required permission:
	//   - `project.write`
	DeactivateProject(context.Context, *connect.Request[v2beta.DeactivateProjectRequest]) (*connect.Response[v2beta.DeactivateProjectResponse], error)
	// Activate Project
	//
	// Set the state of a project to active. Request returns no error if the project is already activated.
	//
	// Required permission:
	//   - `project.write`
	ActivateProject(context.Context, *connect.Request[v2beta.ActivateProjectRequest]) (*connect.Response[v2beta.ActivateProjectResponse], error)
	// Add Project Role
	//
	// Add a new project role to a project. The key must be unique within the project.
	//
	// Required permission:
	//   - `project.role.write`
	AddProjectRole(context.Context, *connect.Request[v2beta.AddProjectRoleRequest]) (*connect.Response[v2beta.AddProjectRoleResponse], error)
	// Update Project Role
	//
	// Change a project role. The key is not editable. If a key should change, remove the role and create a new one.
	//
	// Required permission:
	//   - `project.role.write`
	UpdateProjectRole(context.Context, *connect.Request[v2beta.UpdateProjectRoleRequest]) (*connect.Response[v2beta.UpdateProjectRoleResponse], error)
	// Remove Project Role
	//
	// Removes the role from the project and on every resource it has a dependency. This includes project grants and user grants.
	//
	// Required permission:
	//   - `project.role.write`
	RemoveProjectRole(context.Context, *connect.Request[v2beta.RemoveProjectRoleRequest]) (*connect.Response[v2beta.RemoveProjectRoleResponse], error)
	// List Project Roles
	//
	// Returns all roles of a project matching the search query.
	//
	// Required permission:
	//   - `project.role.read`
	ListProjectRoles(context.Context, *connect.Request[v2beta.ListProjectRolesRequest]) (*connect.Response[v2beta.ListProjectRolesResponse], error)
	// Create Project Grant
	//
	// Grant a project to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.create`
	CreateProjectGrant(context.Context, *connect.Request[v2beta.CreateProjectGrantRequest]) (*connect.Response[v2beta.CreateProjectGrantResponse], error)
	// Update Project Grant
	//
	// Change the roles of the project that is granted to another organization.
	// The project grant will allow the granted organization to access the project and manage the authorizations for its users.
	//
	// Required permission:
	//   - `project.grant.write`
	UpdateProjectGrant(context.Context, *connect.Request[v2beta.UpdateProjectGrantRequest]) (*connect.Response[v2beta.UpdateProjectGrantResponse], error)
	// Delete Project Grant
	//
	// Delete a project grant. All user grants for this project grant will also be removed.
	// A user will not have access to the project afterward (if permissions are checked).
	// In case the project grant is not found, the request will return a successful response as
	// the desired state is already achieved.
	//
	// Required permission:
	//   - `project.grant.delete`
	DeleteProjectGrant(context.Context, *connect.Request[v2beta.DeleteProjectGrantRequest]) (*connect.Response[v2beta.DeleteProjectGrantResponse], error)
	// Deactivate Project Grant
	//
	// Set the state of the project grant to deactivated.
	// Applications under deactivated projects grants are not able to login anymore.
	//
	// Required permission:
	//   - `project.grant.write`
	DeactivateProjectGrant(context.Context, *connect.Request[v2beta.DeactivateProjectGrantRequest]) (*connect.Response[v2beta.DeactivateProjectGrantResponse], error)
	// Activate Project Grant
	//
	// Set the state of the project grant to activated.
	//
	// Required permission:
	//   - `project.grant.write`
	ActivateProjectGrant(context.Context, *connect.Request[v2beta.ActivateProjectGrantRequest]) (*connect.Response[v2beta.ActivateProjectGrantResponse], error)
	// List Project Grants
	//
	// Returns a list of project grants. A project grant is when the organization grants its project to another organization.
	//
	// Required permission:
	//   - `project.grant.write`
	ListProjectGrants(context.Context, *connect.Request[v2beta.ListProjectGrantsRequest]) (*connect.Response[v2beta.ListProjectGrantsResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceMethods := v2beta.File_zitadel_project_v2beta_project_service_proto.Services().ByName("ProjectService").Methods()
	projectServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(projectServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectsHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(projectServiceMethods.ByName("ListProjects")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeactivateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeactivateProjectProcedure,
		svc.DeactivateProject,
		connect.WithSchema(projectServiceMethods.ByName("DeactivateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceActivateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceActivateProjectProcedure,
		svc.ActivateProject,
		connect.WithSchema(projectServiceMethods.ByName("ActivateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceAddProjectRoleHandler := connect.NewUnaryHandler(
		ProjectServiceAddProjectRoleProcedure,
		svc.AddProjectRole,
		connect.WithSchema(projectServiceMethods.ByName("AddProjectRole")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectRoleHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectRoleProcedure,
		svc.UpdateProjectRole,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProjectRole")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceRemoveProjectRoleHandler := connect.NewUnaryHandler(
		ProjectServiceRemoveProjectRoleProcedure,
		svc.RemoveProjectRole,
		connect.WithSchema(projectServiceMethods.ByName("RemoveProjectRole")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectRolesHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectRolesProcedure,
		svc.ListProjectRoles,
		connect.WithSchema(projectServiceMethods.ByName("ListProjectRoles")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateProjectGrantHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectGrantProcedure,
		svc.CreateProjectGrant,
		connect.WithSchema(projectServiceMethods.ByName("CreateProjectGrant")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectGrantHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectGrantProcedure,
		svc.UpdateProjectGrant,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProjectGrant")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectGrantHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectGrantProcedure,
		svc.DeleteProjectGrant,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProjectGrant")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeactivateProjectGrantHandler := connect.NewUnaryHandler(
		ProjectServiceDeactivateProjectGrantProcedure,
		svc.DeactivateProjectGrant,
		connect.WithSchema(projectServiceMethods.ByName("DeactivateProjectGrant")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceActivateProjectGrantHandler := connect.NewUnaryHandler(
		ProjectServiceActivateProjectGrantProcedure,
		svc.ActivateProjectGrant,
		connect.WithSchema(projectServiceMethods.ByName("ActivateProjectGrant")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectGrantsHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectGrantsProcedure,
		svc.ListProjectGrants,
		connect.WithSchema(projectServiceMethods.ByName("ListProjectGrants")),
		connect.WithHandlerOptions(opts...),
	)
	return "/zitadel.project.v2beta.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceCreateProjectProcedure:
			projectServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectProcedure:
			projectServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectProcedure:
			projectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceGetProjectProcedure:
			projectServiceGetProjectHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectsProcedure:
			projectServiceListProjectsHandler.ServeHTTP(w, r)
		case ProjectServiceDeactivateProjectProcedure:
			projectServiceDeactivateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceActivateProjectProcedure:
			projectServiceActivateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceAddProjectRoleProcedure:
			projectServiceAddProjectRoleHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectRoleProcedure:
			projectServiceUpdateProjectRoleHandler.ServeHTTP(w, r)
		case ProjectServiceRemoveProjectRoleProcedure:
			projectServiceRemoveProjectRoleHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectRolesProcedure:
			projectServiceListProjectRolesHandler.ServeHTTP(w, r)
		case ProjectServiceCreateProjectGrantProcedure:
			projectServiceCreateProjectGrantHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectGrantProcedure:
			projectServiceUpdateProjectGrantHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectGrantProcedure:
			projectServiceDeleteProjectGrantHandler.ServeHTTP(w, r)
		case ProjectServiceDeactivateProjectGrantProcedure:
			projectServiceDeactivateProjectGrantHandler.ServeHTTP(w, r)
		case ProjectServiceActivateProjectGrantProcedure:
			projectServiceActivateProjectGrantHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectGrantsProcedure:
			projectServiceListProjectGrantsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect.Request[v2beta.CreateProjectRequest]) (*connect.Response[v2beta.CreateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProject(context.Context, *connect.Request[v2beta.UpdateProjectRequest]) (*connect.Response[v2beta.UpdateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.UpdateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect.Request[v2beta.DeleteProjectRequest]) (*connect.Response[v2beta.DeleteProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetProject(context.Context, *connect.Request[v2beta.GetProjectRequest]) (*connect.Response[v2beta.GetProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.GetProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjects(context.Context, *connect.Request[v2beta.ListProjectsRequest]) (*connect.Response[v2beta.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.ListProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeactivateProject(context.Context, *connect.Request[v2beta.DeactivateProjectRequest]) (*connect.Response[v2beta.DeactivateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.DeactivateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ActivateProject(context.Context, *connect.Request[v2beta.ActivateProjectRequest]) (*connect.Response[v2beta.ActivateProjectResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.ActivateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) AddProjectRole(context.Context, *connect.Request[v2beta.AddProjectRoleRequest]) (*connect.Response[v2beta.AddProjectRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.AddProjectRole is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProjectRole(context.Context, *connect.Request[v2beta.UpdateProjectRoleRequest]) (*connect.Response[v2beta.UpdateProjectRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.UpdateProjectRole is not implemented"))
}

func (UnimplementedProjectServiceHandler) RemoveProjectRole(context.Context, *connect.Request[v2beta.RemoveProjectRoleRequest]) (*connect.Response[v2beta.RemoveProjectRoleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.RemoveProjectRole is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjectRoles(context.Context, *connect.Request[v2beta.ListProjectRolesRequest]) (*connect.Response[v2beta.ListProjectRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.ListProjectRoles is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProjectGrant(context.Context, *connect.Request[v2beta.CreateProjectGrantRequest]) (*connect.Response[v2beta.CreateProjectGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.CreateProjectGrant is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProjectGrant(context.Context, *connect.Request[v2beta.UpdateProjectGrantRequest]) (*connect.Response[v2beta.UpdateProjectGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.UpdateProjectGrant is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProjectGrant(context.Context, *connect.Request[v2beta.DeleteProjectGrantRequest]) (*connect.Response[v2beta.DeleteProjectGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.DeleteProjectGrant is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeactivateProjectGrant(context.Context, *connect.Request[v2beta.DeactivateProjectGrantRequest]) (*connect.Response[v2beta.DeactivateProjectGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.DeactivateProjectGrant is not implemented"))
}

func (UnimplementedProjectServiceHandler) ActivateProjectGrant(context.Context, *connect.Request[v2beta.ActivateProjectGrantRequest]) (*connect.Response[v2beta.ActivateProjectGrantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.ActivateProjectGrant is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjectGrants(context.Context, *connect.Request[v2beta.ListProjectGrantsRequest]) (*connect.Response[v2beta.ListProjectGrantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("zitadel.project.v2beta.ProjectService.ListProjectGrants is not implemented"))
}
