services:

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=postgres
    networks:
      - 'storage'
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    volumes:
      - 'data:/var/lib/postgresql/data:rw'

  zitadel-init:
    restart: 'no'
    networks:
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: 'init --config /example-zitadel-config.yaml --config /example-zitadel-secrets.yaml'
    depends_on:
      db:
        condition: 'service_healthy'
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'

  zitadel-setup:
    restart: 'no'
    networks:
      - 'storage'
    # We use the debug image so we have the environment to
    # - create the .env file for the login to authenticate at Zitadel
    # - set the correct permissions for the .env-file folder
    image: 'ghcr.io/zitadel/zitadel:latest-debug'
    user: root
    entrypoint: '/bin/sh'
    command:
    - -c
    - >
      /app/zitadel setup
      --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
      --steps /example-zitadel-init-steps.yaml
      --masterkey ${ZITADEL_MASTERKEY} &&
      mv /pat /.env-file/pat || exit 0 &&
      echo ZITADEL_SERVICE_USER_TOKEN=$(cat /.env-file/pat) > /.env-file/.env &&
      chown -R 1001:${GID} /.env-file &&
      chmod -R 770 /.env-file
    environment:
      - GID
    depends_on:
      zitadel-init:
        condition: 'service_completed_successfully'
        restart: false
    volumes:
      - './.env-file:/.env-file:rw'
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
      - './example-zitadel-init-steps.yaml:/example-zitadel-init-steps.yaml:ro'

  zitadel:
    restart: 'unless-stopped'
    networks:
      - 'backend'
      - 'storage'
    labels:
      - "traefik.http.routers.zitadel.rule=!PathPrefix(`/ui/v2/login`)"
      - "traefik.http.routers.zitadel.tls=true" # Traefik uses a self-signed certificate
      - "traefik.http.services.zitadel.loadbalancer.passhostheader=true"
      - "traefik.http.services.zitadel.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.zitadel.loadbalancer.server.port=8080"
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: >
      start --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
      --masterkey ${ZITADEL_MASTERKEY}
    depends_on:
      zitadel-setup:
        condition: 'service_completed_successfully'
        restart: true
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
    healthcheck:
      test: [
        "CMD", "/app/zitadel", "ready",
        "--config", "/example-zitadel-config.yaml",
        "--config", "/example-zitadel-secrets.yaml"
      ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  login:
    restart: 'unless-stopped'
    networks:
      - 'backend'
    labels:
      - "traefik.http.routers.login.rule=PathPrefix(`/ui/v2/login`)"
      - "traefik.http.routers.login.tls=true" # Traefik uses a self-signed certificate
      - "traefik.http.services.login.loadbalancer.passhostheader=true"
      - "traefik.http.services.login.loadbalancer.server.port=3000"
    image: 'ghcr.io/zitadel/login:main'
    environment:
      - ZITADEL_API_URL=http://zitadel:8080
      - CUSTOM_REQUEST_HEADERS=Host:localhost
      - NEXT_PUBLIC_BASE_PATH="/ui/v2/login"
    user: "${UID:-1000}"
    volumes:
      - './.env-file:/.env-file:ro'
    depends_on:
      zitadel:
        condition: 'service_healthy'
        restart: false

  traefik:
    image: traefik:latest
    command: --providers.docker --api.insecure=true --entrypoints.websecure.address=:443 --log.level=DEBUG --accesslog
    networks:
      - 'backend'
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      zitadel:
        condition: 'service_healthy'
      login:
        condition: 'service_started'

networks:
  storage:
  backend:

volumes:
  data:
