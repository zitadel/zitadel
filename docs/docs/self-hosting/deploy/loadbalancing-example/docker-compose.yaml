services:

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=postgres
    networks:
      - 'storage'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    volumes:
      - 'data:/var/lib/postgresql/data:rw'

  zitadel-init:
    restart: 'no'
    networks:
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: 'init --config /example-zitadel-config.yaml --config /example-zitadel-secrets.yaml'
    depends_on:
      db:
        condition: 'service_healthy'
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'

  zitadel-setup:
    restart: 'no'
    networks:
      - 'storage'
    # We use the debug image so we have the environment to
    # - create the .env file for the login to authenticate at Zitadel
    # - set the correct permissions for the .env-file folder
    image: 'ghcr.io/zitadel/zitadel:latest-debug'
    user: root
    entrypoint: '/bin/sh'
    command:
    - -c
    - >
      /app/zitadel setup
      --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
      --steps /example-zitadel-init-steps.yaml
      --masterkey ${ZITADEL_MASTERKEY} &&
      mv /pat /.env-file/pat || exit 0 &&
      echo ZITADEL_SERVICE_USER_TOKEN=$(cat /.env-file/pat) > /.env-file/.env &&
      chown -R 1001:${GID} /.env-file &&
      chmod -R 770 /.env-file
    environment:
      - GID
    depends_on:
      zitadel-init:
        condition: 'service_completed_successfully'
        restart: false
    volumes:
      - './.env-file:/.env-file:rw'
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
      - './example-zitadel-init-steps.yaml:/example-zitadel-init-steps.yaml:ro'

  zitadel:
    restart: 'unless-stopped'
    networks:
      - 'backend'
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: >
      start --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
      --masterkey ${ZITADEL_MASTERKEY}
    depends_on:
      zitadel-setup:
        condition: 'service_completed_successfully'
        restart: true
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
    ports:
      - "8080:8080"
    healthcheck:
      test: [
        "CMD", "/app/zitadel", "ready",
        "--config", "/example-zitadel-config.yaml",
        "--config", "/example-zitadel-secrets.yaml"
      ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  # The use-new-login service configures Zitadel to use the new login v2 for all applications.
  # It also gives the setupped machine user the necessary IAM_LOGIN_CLIENT role.
  use-new-login:
    restart: 'on-failure'
    user: "1001"
    networks:
      - 'backend'
    image: 'badouralix/curl-jq:alpine'
    entrypoint: '/bin/sh'
    command:
      - -c
      - >
        curl -X PUT -H "Host: 127.0.0.1.sslip.io" -H "Authorization: Bearer $(cat ./.env-file/pat)" --insecure http://zitadel:8080/v2/features/instance -d '{"loginV2": {"required": true}}' &&
        LOGIN_USER=$(curl --fail-with-body  -H "Host: 127.0.0.1.sslip.io" -H "Authorization: Bearer $(cat ./.env-file/pat)" --insecure http://zitadel:8080/auth/v1/users/me | jq -r '.user.id') &&
        curl -X PUT  -H "Host: 127.0.0.1.sslip.io" -H "Authorization: Bearer $(cat ./.env-file/pat)" --insecure http://zitadel:8080/admin/v1/members/$${LOGIN_USER} -d '{"roles": ["IAM_OWNER", "IAM_LOGIN_CLIENT"]}'
    volumes:
      - './.env-file:/.env-file:ro'
    depends_on:
      zitadel:
        condition: 'service_healthy'
        restart: false

  login:
    restart: 'unless-stopped'
    networks:
      - 'backend'
    image: 'ghcr.io/zitadel/login:main'
    environment:
      - ZITADEL_API_URL=http://zitadel:8080
      - CUSTOM_REQUEST_HEADERS=Host:127.0.0.1.sslip.io
      - NEXT_PUBLIC_BASE_PATH="/ui/v2/login"
    user: "${UID:-1000}"
    volumes:
      - './.env-file:/.env-file:ro'
    depends_on:
      zitadel:
        condition: 'service_healthy'
        restart: false

  traefik:
    restart: 'unless-stopped'
    networks:
      - 'backend'
    image: "traefik:latest"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./example-traefik.yaml:/etc/traefik/traefik.yaml"
    depends_on:
      zitadel:
        condition: 'service_healthy'
      login:
        condition: 'service_started'

networks:
  storage:
  backend:

volumes:
  data:
