services:

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=postgres
    networks:
      - 'storage'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    volumes:
      - 'data:/var/lib/postgresql/data:rw'

  zitadel-init:
    restart: 'no'
    networks:
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: >
      init
      --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
    depends_on:
      db:
        condition: 'service_healthy'
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'

  zitadel-setup:
    restart: 'no'
    networks:
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: >
      setup 
      --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
      --steps /example-zitadel-init-steps.yaml
      --masterkey ${ZITADEL_MASTERKEY}
    depends_on:
      zitadel-init:
        condition: 'service_completed_successfully'
    volumes:
      - '.:/pat-dir:rw'
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
      - './example-zitadel-init-steps.yaml:/example-zitadel-init-steps.yaml:ro'

  zitadel:
    restart: 'unless-stopped'
    networks:
      - 'backend'
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:latest'
    command: >
      start
      --config /example-zitadel-config.yaml
      --config /example-zitadel-secrets.yaml
      --masterkey ${ZITADEL_MASTERKEY}
    depends_on:
      zitadel-setup:
        condition: 'service_completed_successfully'
        restart: true
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
    ports:
      - "8080:8080"
    healthcheck:
      test: [
        "CMD", "/app/zitadel", "ready",
        "--config", "/example-zitadel-config.yaml",
        "--config", "/example-zitadel-secrets.yaml"
      ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  login:
    restart: 'unless-stopped'
    networks:
      - 'backend'
    image: 'ghcr.io/zitadel/login:latest'
    environment:
      - ZITADEL_API_URL=http://zitadel:8080
      - CUSTOM_REQUEST_HEADERS=Host:127.0.0.1.sslip.io
      - NEXT_PUBLIC_BASE_PATH="/ui/v2/login"
      - ZITADEL_SERVICE_USER_TOKEN_FILE=/run/secrets/login-client-pat
    secrets:
      - login-client-pat
    depends_on:
      zitadel:
        condition: 'service_healthy'
        restart: false

  traefik:
    restart: 'unless-stopped'
    networks:
      - 'backend'
    image: "traefik:latest"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./example-traefik.yaml:/etc/traefik/traefik.yaml"
    depends_on:
      zitadel:
        condition: 'service_healthy'
      login:
        condition: 'service_started'

secrets:
    login-client-pat:
      file: './login-client-pat'


networks:
  storage:
  backend:

volumes:
  data:
