services:

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=postgres
    networks:
      - 'storage'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    volumes:
      - 'data:/var/lib/postgresql/data:rw'

  zitadel-init:
    restart: 'no'
    networks:
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:v4.0.0-rc.2'
    command: [ init, --config, /example-zitadel-config.yaml, --config, /example-zitadel-secrets.yaml ]
    depends_on:
      db:
        condition: 'service_healthy'
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'

  zitadel-setup:
    restart: 'no'
    networks:
      - 'storage'
    image: 'ghcr.io/zitadel/zitadel:v4.0.0-rc.2'
    command: [ setup, --config, /current-dir/example-zitadel-config.yaml, --config, /current-dir/example-zitadel-secrets.yaml, --steps, /current-dir/example-zitadel-init-steps.yaml, --masterkey, MasterkeyNeedsToHave32Characters ]
    depends_on:
      zitadel-init:
        condition: 'service_completed_successfully'
        restart: false
    volumes:
      - '.:/current-dir:rw'

  zitadel:
    restart: 'unless-stopped'
    networks:
      - 'backend'
      - 'storage'
    labels:
      - "traefik.http.routers.zitadel.rule=!PathPrefix(`/ui/v2/login`)"
      - "traefik.http.routers.zitadel.tls=true" # Traefik uses a self-signed certificate
      - "traefik.http.services.zitadel.loadbalancer.passhostheader=true"
      - "traefik.http.services.zitadel.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.zitadel.loadbalancer.server.port=8080"
    image: 'ghcr.io/zitadel/zitadel:v4.0.0-rc.2'
    command: [ start, --config, /example-zitadel-config.yaml, --config, /example-zitadel-secrets.yaml, --masterkey, MasterkeyNeedsToHave32Characters ]
    depends_on:
      zitadel-setup:
        condition: 'service_completed_successfully'
        restart: true
    volumes:
      - './example-zitadel-config.yaml:/example-zitadel-config.yaml:ro'
      - './example-zitadel-secrets.yaml:/example-zitadel-secrets.yaml:ro'
    healthcheck:
      test: [ "CMD", "/app/zitadel", "ready", "--config", "/example-zitadel-config.yaml", "--config", "/example-zitadel-secrets.yaml" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  login:
    restart: 'unless-stopped'
    labels:
      - "traefik.http.routers.login.rule=PathPrefix(`/ui/v2/login`)"
      - "traefik.http.routers.login.tls=true" # Traefik uses a self-signed certificate
      - "traefik.http.services.login.loadbalancer.passhostheader=true"
      - "traefik.http.services.login.loadbalancer.server.port=3000"
    image: 'ghcr.io/zitadel/zitadel-login:v4.0.0-rc.2'
    # If you can't use the network_mode service:zitadel, you can pass the environment variable CUSTOM_REQUEST_HEADERS=Host:localhost instead.
    network_mode: service:zitadel
    environment:
      - ZITADEL_API_URL=http://localhost:8080
      - NEXT_PUBLIC_BASE_PATH=/ui/v2/login
      - ZITADEL_SERVICE_USER_TOKEN_FILE=/current-dir/login-client-pat
    user: "${UID:-1000}"
    volumes:
      - '.:/current-dir:ro'
    depends_on:
      zitadel-setup:
        condition: 'service_completed_successfully'
        restart: false

  traefik:
    image: traefik:latest
    command: --providers.docker --api.insecure=true --entrypoints.websecure.address=:443 --log.level=DEBUG --accesslog
    networks:
      - 'backend'
    ports:
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      zitadel:
        condition: 'service_healthy'
      login:
        condition: 'service_started'

networks:
  storage:
  backend:


volumes:
  data:
