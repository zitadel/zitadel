syntax = "proto3";

package zitadel.user.v2;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/user/v2;user";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "zitadel/user/v2/filter.proto";

message PersonalAccessToken {
  // The unique identifier of the personal access token.
  string id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The unique identifier of the user the key belongs to.
  string user_id = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The timestamp of the personal access token creation.
  google.protobuf.Timestamp creation_date = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
}


// Connect multiple sub-condition with and OR operator.
message PersonalAccessTokensOrFilter {
  repeated PersonalAccessTokensSearchFilter filters = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub queries to 'OR'"
    }
  ];
}

// Connect multiple sub-condition with and AND operator.
message PersonalAccessTokensAndFilter {
  repeated PersonalAccessTokensSearchFilter filters = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub queries to 'AND'"
    }
  ];
}

// Negate the sub-condition.
message PersonalAccessTokensNotFilter {
  PersonalAccessTokensSearchFilter filter = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub query to negate (NOT)"
    }
  ];
}

message PersonalAccessTokensSearchFilter {
  oneof filter {
    option (validate.required) = true;

    PersonalAccessTokensOrFilter or_filter = 1;
    PersonalAccessTokensAndFilter and_filter = 2;
    PersonalAccessTokensNotFilter not_filter = 3;

    UserIDFilter user_id_filter = 4;
    OrganizationIDFilter organization_id_filter = 5;
  }
}
