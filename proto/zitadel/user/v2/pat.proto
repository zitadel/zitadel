syntax = "proto3";

package zitadel.user.v2;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/user/v2;user";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "zitadel/user/v2/filter.proto";
import "zitadel/filter/v2/filter.proto";

message PersonalAccessToken {
  // The timestamp of the personal access token creation.
  google.protobuf.Timestamp creation_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
  // The timestamp of the last change of the personal access token.
  google.protobuf.Timestamp change_date = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
  // The unique identifier of the personal access token.
  string id = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The unique identifier of the user the personal access token belongs to.
  string user_id = 4 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The unique identifier of the organization the personal access token belongs to.
  string organization_id = 5 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The personal access tokens expiration date.
  google.protobuf.Timestamp expiration_date = 6 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
}

message PersonalAccessTokensSearchFilter {
  oneof filter {
    option (validate.required) = true;
    PersonalAccessTokensOrFilter or_filter = 1;
    PersonalAccessTokensAndFilter and_filter = 2;
    PersonalAccessTokensNotFilter not_filter = 3;
    IDFilter token_id_filter = 6;
    IDFilter user_id_filter = 5;
    IDFilter organization_id_filter = 4;
    TimestampFilter created_date_filter = 7;
    TimestampFilter changed_date_filter = 8;
    TimestampFilter expiration_date_filter = 9;
  }
}

// Connect multiple sub-condition with and OR operator.
message PersonalAccessTokensOrFilter {
  repeated PersonalAccessTokensSearchFilter filters = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub queries to 'OR'"
    }
  ];
}

// Connect multiple sub-condition with and AND operator.
message PersonalAccessTokensAndFilter {
  repeated PersonalAccessTokensSearchFilter filters = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub queries to 'AND'"
    }
  ];
}

// Negate the sub-condition.
message PersonalAccessTokensNotFilter {
  PersonalAccessTokensSearchFilter filter = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub query to negate (NOT)"
    }
  ];
}

enum PersonalAccessTokenFieldName {
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_UNSPECIFIED = 0;
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_CREATED_DATE = 1;
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_CHANGED_DATE = 2;
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_ID = 3;
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_USER_ID = 4;
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_ORGANIZATION_ID = 5;
  PERSONAL_ACCESS_TOKEN_FIELD_NAME_EXPIRATION_DATE = 6;
}

