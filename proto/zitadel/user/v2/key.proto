syntax = "proto3";

package zitadel.user.v2;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/user/v2;user";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "zitadel/user/v2/filter.proto";
import "zitadel/filter/v2/filter.proto";

message Key {
  // The unique identifier of the key.
  string id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The unique identifier of the user the key belongs to.
  string user_id = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The timestamp of the key creation.
  google.protobuf.Timestamp creation_date = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
}

// Connect multiple sub-condition with and OR operator.
message KeysOrFilter {
  repeated KeysSearchFilter filters = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub queries to 'OR'"
    }
  ];
}

// Connect multiple sub-condition with and AND operator.
message KeysAndFilter {
  repeated KeysSearchFilter filters = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub queries to 'AND'"
    }
  ];
}

// Negate the sub-condition.
message KeysNotFilter {
  KeysSearchFilter filter = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "the sub query to negate (NOT)"
    }
  ];
}

message KeysSearchFilter {
  oneof filter {
    option (validate.required) = true;

    KeysOrFilter or_filter = 1;
    KeysAndFilter and_filter = 2;
    KeysNotFilter not_filter = 3;

    OrganizationIDFilter organization_id_filter = 4;
    UserIDFilter user_id_filter = 5;

    KeyIDFilter key_id_filter = 6;
  }
}

message KeyIDFilter {
  // Only return the resource that belong to this key id.
  string key_id = 1 [
    (validate.rules).string = {max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      max_length: 200;
      example: "\"123\"";
    }
  ];
  // Defines which text comparison method used for the name query.
  zitadel.filter.v2.TextFilterMethod method = 2 [
    (validate.rules).enum.defined_only = true,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "defines which text equality method is used";
    }
  ];
}
