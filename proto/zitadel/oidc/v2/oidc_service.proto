syntax = "proto3";

package zitadel.oidc.v2;

import "zitadel/object/v2/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/oidc/v2/authorization.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/oidc/v2;oidc";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "OIDC Service";
    version: "2.0";
    description: "Get OIDC Auth Request details and create callback URLs.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSING.md";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$CUSTOM-DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service OIDCService {
  // Get Auth Request
  //
  // Get OIDC Auth Request details by ID, obtained from the redirect URL.
  // Returns details that are parsed from the application's Auth Request.
  //
  // Required permissions:
  //   - `session.read`
  rpc GetAuthRequest (GetAuthRequestRequest) returns (GetAuthRequestResponse) {
    option (google.api.http) = {
      get: "/v2/oidc/auth_requests/{auth_request_id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  // Create Callback
  //
  // Finalize an Auth Request and get the callback URL for success or failure.
  // The user must be redirected to the URL in order to inform the application about the success or failure.
  // On success, the URL contains details for the application to obtain the tokens.
  // This method can only be called once for an Auth request.
  //
  // Required permissions:
  //   - `session.link`
  rpc CreateCallback (CreateCallbackRequest) returns (CreateCallbackResponse) {
    option (google.api.http) = {
      post: "/v2/oidc/auth_requests/{auth_request_id}"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  // Get Device Authorization Request
  //
  // Get the device authorization based on the provided "user code".
  // This will return the device authorization request, which contains the device authorization id
  // that is required to authorize the request once the user signed in or to deny it.
  //
  // Required permissions:
  //   - `session.read`
  rpc GetDeviceAuthorizationRequest(GetDeviceAuthorizationRequestRequest) returns (GetDeviceAuthorizationRequestResponse) {
    option (google.api.http) = {
      get: "/v2/oidc/device_authorization/{user_code}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  // Authorize or Deny Device Authorization
  //
  // Authorize or deny the device authorization request based on the provided device authorization id.
  //
  // Required permissions:
  //   - `session.link`
  rpc AuthorizeOrDenyDeviceAuthorization(AuthorizeOrDenyDeviceAuthorizationRequest) returns (AuthorizeOrDenyDeviceAuthorizationResponse) {
    option (google.api.http) = {
      post: "/v2/oidc/device_authorization/{device_authorization_id}"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

}

message GetAuthRequestRequest {
  // The ID of the Auth Request, as obtained from the redirect URL.
  string auth_request_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"163840776835432705\"";
    }
  ];
}

message GetAuthRequestResponse {
  AuthRequest auth_request = 1;
}

message CreateCallbackRequest {
  // The ID of the Auth Request to finalize.
  string auth_request_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"163840776835432705\"";
    },
    (google.api.field_behavior) = REQUIRED
  ];

  // The result of the authorization flow, either success with the user's session or failure with an error.
  oneof callback_kind {
    option (validate.required) = true;

    // The session of the authenticated user, to finalize the authorization request.
    Session session = 2;

    // The error that occurred during the authorization flow, to inform the application.
    // This creates a callback URL with the error details set.
    // See: https://openid.net/specs/openid-connect-core-1_0.html#AuthError
    AuthorizationError error = 3;
  }
}

message Session {
  // ID of the session, used to login the user. Connects the session to the Auth Request.
  string session_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"163840776835432705\"";
    },
    (google.api.field_behavior) = REQUIRED
  ];

  // Token of the session used to login the user. This token verifies that the session is valid.
  string session_token = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
    },
    (google.api.field_behavior) = REQUIRED
  ];
}

message CreateCallbackResponse {
  zitadel.object.v2.Details details = 1;
  // The callback URL where the user should be redirected using an HTTP "302 FOUND" status.
  // This contains details for the application to obtain the tokens on success, or error details on failure.
  // Note that this field must be treated as credentials, as the contained code can be used to obtain tokens on behalf of the user."
  string callback_url = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj\""
    }
  ];
}

message GetDeviceAuthorizationRequestRequest {
  // The user_code returned by the device authorization request and provided to the user by the device.
  string user_code = 1 [
    (validate.rules).string = {len: 9},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 9;
      max_length: 9;
      example: "\"K9LV-3DMQ\"";
    },
    (google.api.field_behavior) = REQUIRED
  ];
}

message GetDeviceAuthorizationRequestResponse {
  DeviceAuthorizationRequest device_authorization_request = 1;
}

message AuthorizeOrDenyDeviceAuthorizationRequest {
  // The device authorization id returned when submitting the user code.
  string device_authorization_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
    },
    (google.api.field_behavior) = REQUIRED
  ];

  // The decision of the user to authorize or deny the device authorization request.
  oneof decision {
    option (validate.required) = true;
    // To authorize the device authorization request, the user's session must be provided.
    Session session = 2;
    // Deny the device authorization request.
    Deny deny = 3;
  }
}

message Deny{}

message AuthorizeOrDenyDeviceAuthorizationResponse {}