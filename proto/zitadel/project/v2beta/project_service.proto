syntax = "proto3";

package zitadel.project.v2beta;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

import "zitadel/protoc_gen_zitadel/v2/options.proto";

import "zitadel/project/v2beta/query.proto";
import "google/protobuf/timestamp.proto";
import "zitadel/filter/v2beta/filter.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/project/v2beta;project";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Project Service";
    version: "2.0-beta";
    description: "This API is intended to manage Projects in a ZITADEL Organization. This service is in beta state. It can AND will continue breaking until a stable version is released.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSING.md";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$CUSTOM-DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

// Service to manage projects.
service ProjectService {

  // Create Project
  //
  // Create a new Project.
  //
  // Required permission:
  //   - `project.create`
  rpc CreateProject (CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v2beta/projects"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "project.create"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Project created successfully";
        };
      };
      responses: {
        key: "409"
        value: {
          description: "The project to create already exists.";
        }
      };
    };
  }

  // Update Project
  //
  // Update an existing project.
  //
  // Required permission:
  //   - `project.write`
  rpc UpdateProject (UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      post: "/v2beta/projects/{id}"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "project.write"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Project successfully updated or left unchanged";
        };
      };
      responses: {
        key: "404"
        value: {
          description: "The project to update does not exist.";
        }
      };
    };
  }

  // Delete Project
  //
  // Delete an existing project.
  // In case the project is not found, the request will return a successful response as
  // the desired state is already achieved.
  //
  // Required permission:
  //   - `project.delete`
  rpc DeleteProject (DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete: "/v2beta/projects/{id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "project.delete"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "Project deleted successfully";
        };
      };
    };
  }

  // Get Project
  //
  // Returns the project identified by the requested ID.
  //
  // Required permission:
  //   - `project.read`
  rpc GetProject (GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/v2beta/projects/{id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "project.read"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200"
        value: {
          description: "Project retrieved successfully";
        }
      };
      responses: {
        key: "404"
        value: {
          description: "The project to update does not exist.";
        }
      };
    };
  }

  // List projects
  //
  // List all matching projects. By default all projects of the instance are returned.
  // Make sure to include a limit and sorting for pagination.
  //
  // Required permission:
  //   - `project.read`
  rpc ListProjects (ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {
      post: "/v2beta/projects/_search",
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "project.read"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      responses: {
        key: "200";
        value: {
          description: "A list of all projects matching the query";
        };
      };
      responses: {
        key: "400";
        value: {
          description: "invalid list query";
        };
      };
    };
  }
}

message CreateProjectRequest {
  // Name of the project.
  string name = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"MyProject\"";
    }
  ];
  // Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
  bool project_role_assertion = 2;
  // When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project.
  bool project_role_check = 3;
  // When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project.
  bool has_project_check = 4;
  // Define which private labeling/branding should trigger when getting to a login of this project.
  PrivateLabelingSetting private_labeling_setting = 5 [
    (validate.rules).enum = {defined_only: true}
  ];
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: "{\"name\":\"MyProject\",\"projectRoleAssertion\":true,\"projectRoleCheck\":true,\"hasProjectCheck\":true,\"privateLabelingSetting\":\"PRIVATE_LABELING_SETTING_UNSPECIFIED\"}";
  };
}

message CreateProjectResponse {
  // The unique identifier of the newly created project.
  string id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The timestamp of the project creation.
  google.protobuf.Timestamp creation_date = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
}

message UpdateProjectRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
  // Name of the project.
  optional string name = 2  [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"MyProject-Updated\"";
    }
  ];
  // Enable this setting to have role information included in the user info endpoint. It is also dependent on your application settings to include it in tokens and other types.
  optional bool project_role_assertion = 3;
  // When enabled ZITADEL will check if a user has a role of this project assigned when login into an application of this project.
  optional bool project_role_check = 4;
  // When enabled ZITADEL will check if the organization of the user, that is trying to log in, has a grant to this project.
  optional bool has_project_check = 5;
  // Define which private labeling/branding should trigger when getting to a login of this project.
  optional PrivateLabelingSetting private_labeling_setting = 6 [
    (validate.rules).enum = {defined_only: true}
  ];
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: "{\"name\":\"MyProject-Updated\",\"projectRoleAssertion\":true,\"projectRoleCheck\":true,\"hasProjectCheck\":true,\"privateLabelingSetting\":\"PRIVATE_LABELING_SETTING_UNSPECIFIED\"}";
  };
}

message UpdateProjectResponse {
  // The timestamp of the change of the project.
  google.protobuf.Timestamp change_date = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message DeleteProjectRequest {
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message DeleteProjectResponse {
  // The timestamp of the deletion of the project.
  // Note that the deletion date is only guaranteed to be set if the deletion was successful during the request.
  // In case the deletion occurred in a previous request, the deletion date might be empty.
  google.protobuf.Timestamp deletion_date = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
}

message GetProjectRequest {
  // The unique identifier of the project.
  string id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1,
      max_length: 200,
      example: "\"69629026806489455\"";
    }
  ];
}

message GetProjectResponse {
  Project project = 1;
}

message ListProjectsRequest {
  // List limitations and ordering.
  optional zitadel.filter.v2beta.PaginationRequest pagination = 1;
  // The field the result is sorted by. The default is the creation date. Beware that if you change this, your result pagination might be inconsistent.
  optional ProjectFieldName sorting_column = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      default: "\"TARGET_FIELD_NAME_CREATION_DATE\""
    }
  ];
  // Define the criteria to query for.
  repeated ProjectSearchFilter filters = 3;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    example: "{\"pagination\":{\"offset\":0,\"limit\":0,\"asc\":true},\"sortingColumn\":\"PROJECT_FIELD_NAME_CREATION_DATE\",\"filters\":[{\"projectNameFilter\":{\"projectName\":\"MyProject\",\"method\":\"TEXT_FILTER_METHOD_EQUALS\"}},{\"inProjectIdsFilter\":{\"projectIds\":[\"69629023906488334\",\"69622366012355662\"]}}]}";
  };
}

message ListProjectsResponse {
  zitadel.filter.v2beta.PaginationResponse pagination = 1;
  repeated Project result = 2;
}
