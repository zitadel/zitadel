syntax = "proto3";

package zitadel.action.v2beta;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/action/v2beta;action";

message Target {
  // The unique identifier of the target.
  string id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"69629012906488334\"";
    }
  ];
  // The timestamp of the target creation.
  google.protobuf.Timestamp creation_date = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2024-12-18T07:50:47.492Z\"";
    }
  ];
  // The timestamp of the last change to the target (e.g. creation, activation, deactivation).
  google.protobuf.Timestamp change_date = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2025-01-23T10:34:18.051Z\"";
    }
  ];
  string name = 4 [
    (validate.rules).string = {min_len: 1, max_len: 1000},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"ip_allow_list\"";
      min_length: 1
      max_length: 1000
    }
  ];
  // Defines the target type and how the response of the target is treated.
  oneof target_type {
    option (validate.required) = true;
    RESTWebhook rest_webhook = 5;
    RESTCall rest_call = 6;
    RESTAsync rest_async = 7;
  }
  // Timeout defines the duration until ZITADEL cancels the execution.
  google.protobuf.Duration timeout = 8 [
    (validate.rules).duration = {gte: {}, lte: {seconds: 270}},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "if the target doesn't respond before this timeout expires, the the connection is closed and the action fails";
      example: "\"10s\"";
    }
  ];
  string endpoint = 9 [
    (validate.rules).string = {min_len: 1, max_len: 1000},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"https://example.com/hooks/ip_check\""
      min_length: 1
      max_length: 1000
    }
  ];
  string signing_key = 10 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"98KmsU67\""
    }
  ];
}

// Wait for response but response body is ignored, status is checked, call is sent as post.
message RESTWebhook {
  // Define if any error stops the whole execution. By default the process continues as normal.
  bool interrupt_on_error = 1;
}

// Wait for response and response body is used, status is checked, call is sent as post.
message RESTCall {
  // Define if any error stops the whole execution. By default the process continues as normal.
  bool interrupt_on_error = 1;
}

// Call is executed in parallel to others, ZITADEL does not wait until the call is finished. The state is ignored, call is sent as post.
message RESTAsync {}
