syntax = "proto3";

package zitadel.settings.v2;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/settings/v2;settings";

import "protoc-gen-openapiv2/options/annotations.proto";
import "zitadel/settings/v2/settings.proto";
import "zitadel/idp/v2/idp.proto";
import "google/protobuf/duration.proto";

message LoginSettings {
  // If enabled, users can log in locally with their username and passkeys or password.
  // Disabling this option will require users to log in with an external identity provider.
  // Be sure to allow at least one external identity provider if this option is disabled.
  // Deprecated: check allow_local_authentication instead.
  bool allow_username_password = 1 [
    deprecated = true
  ];

  // If enabled, users can log in locally with their username and passkeys or password.
  // Disabling this option will require users to log in with an external identity provider.
  // Be sure to allow at least one external identity provider if this option is disabled.
  bool allow_local_authentication = 20;

  // If enabled, users can register a local account by themself.
  // This option does not effect external identity providers.
  // Each identity provider can be configured to allow or disallow registration.
  bool allow_register = 2;

  // If enabled, users will generally be allowed to use an external identity provider to log in.
  // Be sure to allow at least one external identity provider if this option is enabled.
  bool allow_external_idp = 3;

  // If enabled, users will be forced to use a multi-factor to log in.
  // This also applies to federated logins through an external identity provider.
  // Users will be required to set up a second factor if they have not done so already.
  bool force_mfa = 4;

  // Defines the usage of passkeys for users.
  // PASSKEYS_TYPE_NOT_ALLOWED: Users are not allowed to use passkeys.
  // PASSKEYS_TYPE_ALLOWED: Users are allowed to use passkeys.
  // There will be additional options in the future.
  // If passkeys are allowed, users can choose to use passkeys or password for local authentication.
  // A verified passkey authentication will not require a second factor, if force_mfa is enabled.
  PasskeysType passkeys_type = 5;

  // If enabled, the password reset link will be hidden on the login screen.
  bool hide_password_reset = 6;

  // If enabled, an unknown username on the login screen will not return an error directly,
  // but will always display the password screen.
  // This prevents user enumeration attacks.
  bool ignore_unknown_usernames = 7;

  // Defines where the user will be redirected to if the login is started without app context (e.g. from mail).
  string default_redirect_uri = 8 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"https://acme.com/ui/console\"";
    }
  ];

  // The duration a password check is valid.
  // After this time has passed, the user will be required to re-validate their
  // password on the next action that requires authentication.
  // Note that this does not enforce a logout or session expiration.
  google.protobuf.Duration password_check_lifetime = 9 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"864000s\"";
    }
  ];

  // The duration a login through an external identity provider is valid.
  // After this time has passed, the user will be required to re-authenticate with the
  // external identity provider on the next action that requires authentication.
  // Note that this does not enforce a logout or session expiration.
  google.protobuf.Duration external_login_check_lifetime = 10 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"864000s\"";
    }
  ];

  // Defines after how much time the mfa prompt will be shown again.
  google.protobuf.Duration mfa_init_skip_lifetime = 11 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"2592000s\"";
    }
  ];

  // The duration a second factor check is valid.
  // After this time has passed, the user will be required to re-validate their
  // second factor on the next action that requires authentication.
  // Note that this does not enforce a logout or session expiration.
  google.protobuf.Duration second_factor_check_lifetime = 12 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"64800s\"";
    }
  ];

  // The duration a multi-factor check is valid.
  // After this time has passed, the user will be required to re-validate their
  // multi-factor on the next action that requires authentication.
  // Note that this does not enforce a logout or session expiration.
  google.protobuf.Duration multi_factor_check_lifetime = 13 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"43200s\"";
    }
  ];

  // The list of allowed second factors.
  repeated SecondFactorType second_factors = 14;

  // The list of allowed multi factors.
  repeated MultiFactorType multi_factors = 15;

  // Allow discovery of the organization and its authentication option by domain.
  // If set to true, the suffix (@domain.com) of an unknown username input on the login screen
  // will be matched against the organization domains and will redirect to the registration of that organization on success.
  // The registration can either be locally (requires allow_register to be true) or through an external identity provider.
  // In case only one identity provider is configured for the organization, the user will be redirected directly to the identity provider.
  bool allow_domain_discovery = 16;

  // By default, users can login with their verified email address additionally to their login name.
  // Setting this to true disables the email login.
  // Note: If the email is set as the login name, this setting has no effect.
  bool disable_login_with_email = 17 ;

  // By default, users can login with their verified phone number additionally to their login name.
  // Setting this to true disables the phone number login.
  // Note: If the phone number is set as the login name, this setting has no effect.
  bool disable_login_with_phone = 18;

  // ResourceOwnerType returns if the settings is managed on the organization explicitly or
  // fell back on the instance settings.
  ResourceOwnerType resource_owner_type = 19;

  // If enabled, users will be forced to use a multi-factor to log in if they authenticated locally.
  // This does not apply to federated logins through an external identity provider.
  // Users will be required to set up a second factor if they have not done so already.
  // If both force_mfa and force_mfa_local_only are enabled, force_mfa takes precedence and
  // all logins will require a second factor.
  bool force_mfa_local_only = 22;
}

enum SecondFactorType {
  option allow_alias = true;
  SECOND_FACTOR_TYPE_UNSPECIFIED = 0;
  // Deprecated: use SECOND_FACTOR_TYPE_TOTP instead.
  SECOND_FACTOR_TYPE_OTP = 1;
  SECOND_FACTOR_TYPE_TOTP = 1;
  SECOND_FACTOR_TYPE_U2F = 2;
  SECOND_FACTOR_TYPE_OTP_EMAIL = 3;
  SECOND_FACTOR_TYPE_OTP_SMS = 4;
}

enum MultiFactorType {
  MULTI_FACTOR_TYPE_UNSPECIFIED = 0;
  MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION = 1;
}

enum PasskeysType {
  PASSKEYS_TYPE_NOT_ALLOWED = 0;
  PASSKEYS_TYPE_ALLOWED = 1;
}

message IdentityProvider {
  string id = 1;
  string name = 2;
  IdentityProviderType type = 3;
  zitadel.idp.v2.Options options = 4;
}

enum IdentityProviderType {
  IDENTITY_PROVIDER_TYPE_UNSPECIFIED = 0;
  IDENTITY_PROVIDER_TYPE_OIDC = 1;
  IDENTITY_PROVIDER_TYPE_JWT = 2;
  IDENTITY_PROVIDER_TYPE_LDAP = 3;
  IDENTITY_PROVIDER_TYPE_OAUTH = 4;
  IDENTITY_PROVIDER_TYPE_AZURE_AD = 5;
  IDENTITY_PROVIDER_TYPE_GITHUB = 6;
  IDENTITY_PROVIDER_TYPE_GITHUB_ES = 7;
  IDENTITY_PROVIDER_TYPE_GITLAB = 8;
  IDENTITY_PROVIDER_TYPE_GITLAB_SELF_HOSTED = 9;
  IDENTITY_PROVIDER_TYPE_GOOGLE = 10;
  IDENTITY_PROVIDER_TYPE_SAML = 11;
  IDENTITY_PROVIDER_TYPE_APPLE = 12;
}
