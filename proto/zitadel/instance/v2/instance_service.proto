syntax = "proto3";

package zitadel.instance.v2;

import "validate/validate.proto";
import "zitadel/object/v2/object.proto";
import "zitadel/instance/v2/instance.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/instance/v2;instance";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Instance Service";
    version: "2.0";
    description: "This API is intended to manage instances in ZITADEL.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "AGPL-3.0-only",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSING.md";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$CUSTOM-DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "$CUSTOM-DOMAIN/oauth/v2/authorize";
        token_url: "$CUSTOM-DOMAIN/oauth/v2/token";
        scopes: {
          scope: {
            key: "openid";
            value: "openid";
          }
          scope: {
            key: "urn:zitadel:iam:org:project:id:zitadel:aud";
            value: "urn:zitadel:iam:org:project:id:zitadel:aud";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "openid";
        scope: "urn:zitadel:iam:org:project:id:zitadel:aud";
      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

message DeleteInstanceRequest {
  string instance_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      description: "\"id of the instance to terminate\"";
      example: "\"222430354126975533\"";
    }
  ];
}

message DeleteInstanceResponse {
  zitadel.object.v2.Details details = 1;
}

message GetInstanceResponse {
  zitadel.instance.v2.Instance instance = 1;
}

message UpdateInstanceRequest {
  string instance_name = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      description: "\"name of the instance to update\"";
      example: "\"my instance\"";
    }
  ];
}

message UpdateInstanceResponse {
    zitadel.object.v2.Details details = 1;
}

service InstanceService {

  // DeleteInstance deletes an instance with the given ID.
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Deletes an instance with the given ID.";
      tags: "Instance";
      responses: {
        key: "200";
        value: {
          description: "The deleted instance.";
          schema: {
            json_schema: {
              ref: "#/definitions/DeleteInstanceResponse";
            }
          };
        }
      };
    };

    option (google.api.http) = {
      delete: "/v2/instances/{instance_id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "instance.delete"
      }
      http_response: {
        success_code: 204
      }
    };
  }

  // GetInstance returns the instance for the current context.
  rpc GetInstance(google.protobuf.Empty) returns (GetInstanceResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Gets the instance associated to the current context";
      tags: "Instance";
      responses: {
        key: "200";
        value: {
          description: "The instance of the context.";
          schema: {
            json_schema: {
              ref: "#/definitions/GetInstanceResponse";
            }
          };
        }
      };
    };

    option (google.api.http) = {
      get: "/v2/instances/current"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "instance.get"
      }
    };
  }

  // UpdateInstance updates the current instance with the given name.
  rpc UpdateInstance(UpdateInstanceRequest) returns (UpdateInstanceResponse) {
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Updates the current instance with the given name.";
      tags: "Instance";
      responses: {
        key: "200";
        value: {
          description: "The updated instance.";
          schema: {
            json_schema: {
              ref: "#/definitions/UpdateInstanceResponse";
            }
          };
        }
      };
    };

    option (google.api.http) = {
      put: "/v2/instances/current"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "instance.update"
      }
    };
  }
}

// UpdateInstance
// ListInstances

// Add Custom Domain
// Remove Custom Domain
// List Custom Domains
// Add Trusted Domain
// Remove Trusted Domain
// List Trusted Domain