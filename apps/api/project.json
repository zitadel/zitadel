{
    "$schema": "../../node_modules/nx/schemas/project-schema.json",
    "name": "@zitadel/api",
    "projectType": "application",
    "namedInputs": {
        "sources": [
            "{workspaceRoot}/cmd/**/*.go",
            "{workspaceRoot}/internal/**/*.go",
            "{workspaceRoot}/proto/**/*.go",
            "{workspaceRoot}/pkg/**/*.go",
            "{workspaceRoot}/main.go"
        ],
        "runtime": [
            "sources",
            "{workspaceRoot}/go*",
            "!{workspaceRoot}/internal/integration/**/*",
            "!{workspaceRoot}/**/*_test.go",
            "!{workspaceRoot}/**/integration_test/**/*"
        ],
        "pack": [
            { "env": "VERSION" },
            "runtime"
        ]
    },
    "targets": {
        "prod": {
            "description": "Runs the Go-based API backend in production mode",
            "continuous": true,
            "dependsOn": [
                "setup"
            ],
            "options": {
                "env": {
                    "DEV_CONFIG_FILE": "{projectRoot}/dev.yaml"
                }
            },
            "command": "bash -c './.artifacts/bin/$(go env GOOS)/$(go env GOARCH)/${ZITADEL_BINARY:-zitadel.local} start --config ${API_CONFIG_FILE:-${DEV_CONFIG_FILE}} --masterkey MasterkeyNeedsToHave32Characters'"
        },
        "setup": {
            "description": "Sets up the API with initial data and migrates data to newer API versions.",
            "dependsOn": [
                "build"
            ],
            "executor": "nx:run-commands",
            "options": {
                "parallel": false,
                "env": {
                    "DEV_CONFIG_FILE": "{projectRoot}/dev.yaml"
                },
                "commands": [
                    "bash -c 'for i in {1..20}; do echo \"Attempt $i/20: Starting ZITADEL...\";./.artifacts/bin/$(go env GOOS)/$(go env GOARCH)/${ZITADEL_BINARY:-zitadel.local} init --config ${API_CONFIG_FILE:-${DEV_CONFIG_FILE}} && break || (echo \"Failed, retrying in 2s...\" && sleep 2); done'",
                    "bash -c './.artifacts/bin/$(go env GOOS)/$(go env GOARCH)/${ZITADEL_BINARY:-zitadel.local} setup --config ${API_CONFIG_FILE:-${DEV_CONFIG_FILE}} --steps ${API_CONFIG_FILE:-${DEV_CONFIG_FILE}} --masterkey MasterkeyNeedsToHave32Characters'"
                ]
            }
        },
        "build": {
            "description": "Compiles the Go-based API backend into an executable binary.",
            "dependsOn": [
                "generate"
            ],
            "command": "bash -c 'CGO_ENABLED=0 go build -o .artifacts/bin/$(go env GOOS)/$(go env GOARCH)/zitadel.local -v -ldflags=\"-s -w\"'",
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" },
                "runtime"
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/bin/*/*/zitadel.local"
            ]
        },
        "generate": {
            "description": "Generates the code needed to start a full-featured API",
            "dependsOn": [
                "generate-stubs",
                "generate-statik",
                "generate-console",
                "generate-assets"
            ]
        },
        "lint": {
            "description": "Lints the Go code using a Docker container with golangci-lint",
            "dependsOn": [
                "generate-stubs"
            ],
            "command": "docker run -t --rm -v ${DEVCONTAINER_LOCAL_WORKSPACE_ROOT:-$(pwd)}:/app -w /app golangci/golangci-lint:v2.4.0 golangci-lint run --timeout 15m --config ./.golangci.yaml",
            "cache": true,
            "inputs": [
                "sources",
                "{workspaceRoot}/.golangci.yaml"
            ]
        },
        "test": {
            "description": "Run all tests (unit and integration)",
            "dependsOn": [
                "test-unit",
                "test-integration"
            ]
        },
        "test-unit": {
            "description": "Run the unit tests with coverage",
            "dependsOn": [
                "generate-stubs"
            ],
            "command": "go test -race -coverprofile=profile.api.test-unit.cov -coverpkg=./internal/...  ./...",
            "cache": true,
            "inputs": [
                "sources",
                "{workspaceRoot}/go*"
            ],
            "outputs": [
                "{workspaceRoot}/profile.api.test-unit.cov"
            ]
        },
        "test-integration-build": {
            "description": "Builds the test binary for integration tests. The binary is able to record coverage and it supports debugger attachment.",
            "cache": true,
            "dependsOn": [
                "generate-stubs"
            ],            
            "command": "go build -cover -race -tags integration -o .artifacts/bin/$(go env GOOS)/$(go env GOARCH)/zitadel.test main.go",
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" },
                "sources",
                "{workspaceRoot}/internal/integration/**",
                "{workspaceRoot}/go*"
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/bin/*/*/zitadel.test"
            ]
        },
        "test-integration-state": {
            "description": "Sets up the state for the integration tests. This includes starting an ephemeral PostgreSQL database and a Redis cache. It also sets up the data needed for the tests.",
            "dependsOn": [
                "test-integration-build"
            ],
            "executor": "nx:run-commands",
            "options": {
                "env": {
                    "API_CONFIG_FILE": "{projectRoot}/test-integration.yaml",
                    "ZITADEL_BINARY": "zitadel.test",
                    "GOCOVERDIR": "{workspaceRoot}/.artifacts/api-test-integration/coverage",
                    "GORACE": "halt_on_error=1"
                },
                "parallel": false,
                "commands": [
                    "nx run @zitadel/devcontainer:compose up --detach --force-recreate --renew-anon-volumes db-api-integration cache-api-integration",
                    "mkdir -p ${GOCOVERDIR}",
                    "nx run @zitadel/api:setup --excludeTaskDependencies"
                ]
            }
        },
        "test-integration-app": {
            "description": "Runs the API backend in a mode suitable for integration tests. This includes using the test configuration and enabling coverage recording.",
            "continuous": true,
            "dependsOn": [
                "test-integration-state"
            ],
            "options": {
                "env": {
                    "API_CONFIG_FILE": "{projectRoot}/test-integration.yaml",
                    "ZITADEL_BINARY": "zitadel.test",
                    "GOCOVERDIR": "{workspaceRoot}/.artifacts/api-test-integration/coverage",
                    "GORACE": "log_path=.artifacts/api-test-integration/race.log"
                }
            },
            "command": "nx run @zitadel/api:prod --excludeTaskDependencies"
        },
        "test-integration": {
            "description": "Runs the integration tests sequentially with coverage and race condition detection. Go test caching is disabled, because the tests run against an out-of-process API.",
            "dependsOn": [
                "test-integration-app"
            ],
            "executor": "nx:run-commands",
            "options": {
                "parallel": false,
                "env": {
                    "GOCOVERDIR": "{workspaceRoot}/.artifacts/api-test-integration/coverage"
                },
                "commands": [
                    "bash -c 'go test -race -count 1 -tags integration -timeout 60m -parallel 1 $(go list -tags integration ./... | grep -e \"integration_test\" -e \"events_testing\")'",
                    "go tool covdata textfmt -i=$GOCOVERDIR -pkg=github.com/zitadel/zitadel/internal/...,github.com/zitadel/zitadel/cmd/...,github.com/zitadel/zitadel/backend/... -o profile.api.test-integration.cov",
                    "nx run @zitadel/devcontainer:compose down db-api-integration cache-api-integration"
                ]
            },
            "cache": true,
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" },
                "sources",
                "{workspaceRoot}/internal/integration/**",
                "{workspaceRoot}/go*"
            ],
            "outputs": [
                "{workspaceRoot}/profile.api.test-integration.cov"
            ]
        },
        "generate-console": {
            "description": "Builds the console and copies the static files to the API",
            "cache": true,
            "dependsOn": [
                "@zitadel/console:build"
            ],
            "command": "cp -r console/dist/console/* internal/api/ui/console/static",
            "outputs": [
                "{workspaceRoot}/internal/api/ui/console/static"
            ]
        },
        "generate-stubs": {
            "description": "Generates the gRPC and OpenAPI stubs from the proto files. This is the minimal requirement for compiling and running the API.",
            "cache": true,
            "dependsOn": [
                "generate-stubs-build",
                "generate-stubs-install"
            ],
            "executor": "nx:run-commands",
            "options": {
                "parallel": false,
                "commands": [
                    "PATH=\"$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH):$PATH\" buf generate",
                    "mkdir -p pkg/grpc openapi/v2/zitadel",
                    "cp -r .artifacts/grpc/github.com/zitadel/zitadel/pkg/grpc/** pkg/grpc/",
                    "cp -r .artifacts/grpc/zitadel/ openapi/v2/zitadel"
                ]
            },
            "inputs": [
                "{workspaceRoot}/proto/**/*",
                "{workspaceRoot}/buf.gen.yaml",
                "{workspaceRoot}/buf.yaml"                
            ],
            "outputs": [
                "{workspaceRoot}/pkg/grpc/**/*",
                "{workspaceRoot}/openapi/v2/zitadel/**/*"
            ]            
        },
        "generate-stubs-build": {
            "description": "Builds custom protoc generators",
            "cache": true,
            "executor": "nx:run-commands",
            "options": {
                "parallel": false,
                "commands": [
                    "mkdir -p .artifacts/bin",
                    "go build -o .artifacts/bin/$(go env GOOS)/$(go env GOARCH)/protoc-gen-authoption internal/protoc/protoc-gen-authoption/main.go",
                    "go build -o .artifacts/bin/$(go env GOOS)/$(go env GOARCH)/protoc-gen-zitadel internal/protoc/protoc-gen-zitadel/main.go"
                ]
            },
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" },                
                "{workspaceRoot}/internal/protoc/protoc-gen-authoption/**/*",
                "{workspaceRoot}/internal/protoc/protoc-gen-zitadel/**/*"
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-authoption",
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-zitadel"
            ]
        },
        "generate-stubs-install": {
            "description": "Installs third-party protoc generators",
            "cache": true,
            "executor": "nx:run-commands",
            "options": {
                "parallel": true,
                "commands": [
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.35.1",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.5.1",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.22.0",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.22.0",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install github.com/envoyproxy/protoc-gen-validate@v1.1.0",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install github.com/bufbuild/buf/cmd/buf@v1.45.0",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install connectrpc.com/connect/cmd/protoc-gen-connect-go@v1.18.1"
                ]
            },
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-go",
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-go-grpc",
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-grpc-gateway",
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-openapiv2",
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-validate",
                "{workspaceRoot}/.artifacts/bin/*/*/buf",
                "{workspaceRoot}/.artifacts/bin/*/*/protoc-gen-connect-go"
            ]
        },
        "generate-statik": {
            "description": "Generates statik files for embedding static resources",
            "cache": true,
            "dependsOn": [
                "generate-statik-install"
            ],
            "executor": "nx:run-commands",
            "options": {
                "commands": [
                    "PATH=\"$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH):$PATH\" go generate internal/api/ui/login/static/resources/generate.go",
                    "PATH=\"$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH):$PATH\" go generate internal/api/ui/login/statik/generate.go",
                    "PATH=\"$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH):$PATH\" go generate internal/notification/statik/generate.go",
                    "PATH=\"$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH):$PATH\" go generate internal/statik/generate.go"
                ]
            },
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" },
                "{workspaceRoot}/internal/statik/generate.go",
                "{workspaceRoot}/internal/notification/statik/generate.go",
                "{workspaceRoot}/internal/api/ui/login/static/resources/generate.go",
                "{workspaceRoot}/internal/api/ui/login/statik/generate.go"
            ],
            "outputs": [
                "{workspaceRoot}/internal/statik/statik.go",
                "{workspaceRoot}/internal/notification/statik/statik.go",
                "{workspaceRoot}/internal/api/ui/login/static/resources/themes/zitadel/css/zitadel.css*",
                "{workspaceRoot}/internal/api/ui/login/statik/statik.go"
            ]
        },
        "generate-statik-install": {
            "description": "Install statik binary for embedding static files",
            "cache": true,
            "command": "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install github.com/rakyll/statik@v0.1.7",
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/bin/*/*/statik"
            ]
        },        
        "generate-assets": {
            "description": "Generates asset routes and documentation",
            "cache": true,
            "command": "mkdir -p docs/apis/assets && go run internal/api/assets/generator/asset_generator.go -directory=internal/api/assets/generator/ -assets=docs/apis/assets/assets.md",
            "inputs": [
                "{workspaceRoot}/internal/api/assets/generator/asset_generator.go"
            ],
            "outputs": [
                "{workspaceRoot}/internal/api/assets/authz.go",
                "{workspaceRoot}/internal/api/assets/router.go",
                "{workspaceRoot}/docs/apis/assets/assets.md"
            ]
        },
        "generate-go": {
            "description": "Generates Go using Go native generation tools. This only needs to be run if sources for //go:generate files change, like for Stringer, Enumer, Mockgen etc.",
            "dependsOn": [
                "generate-go-install"
            ],
            "command": "go generate ./..."
        },
        "generate-go-install": {
            "description": "Install Go binaries needed to generate Go code",
            "cache": true,
            "dependsOn": [
                "generate-statik-install"
            ],
            "executor": "nx:run-commands",
            "options": {
                "commands": [
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install github.com/dmarkham/enumer@v1.5.11",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install go.uber.org/mock/mockgen@v0.4.0",
                    "GOBIN=$(pwd)/.artifacts/bin/$(go env GOOS)/$(go env GOARCH) go install golang.org/x/tools/cmd/stringer@v0.36.0"
                ]
            },
            "inputs": [
                { "runtime": "go env GOOS" },
                { "runtime": "go env GOARCH" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/bin/*/*/enumer",
                "{workspaceRoot}/.artifacts/bin/*/*/mockgen",
                "{workspaceRoot}/.artifacts/bin/*/*/stringer"
            ]
        },
        "pack-platform": {
            "description": "Cross-compiles the binary and packages it for the platform defined by GOOS and GOARCH environment variables. The version is taken from the ZITADEL_VERSION environment variable.",
            "executor": "nx:run-commands",
            "options": {
                "commands": [
                    "mkdir -p .artifacts/pack .artifacts/bin/$GOOS/$GOARCH",
                    "bash -c 'EXT=\"\"; if [ \"$GOOS\" = \"windows\" ]; then EXT=\".exe\"; fi; echo \"Building for $GOOS-$GOARCH...\"; CGO_ENABLED=0 go build -o .artifacts/bin/$GOOS/$GOARCH/zitadel$EXT -v -ldflags=\"-s -w -X github.com/zitadel/zitadel/cmd/build.commit=$(git rev-parse --short HEAD) -X github.com/zitadel/zitadel/cmd/build.date=$(date \"+%Y-%m-%dT%T%z\" | sed -E \"s/.([0-9]{2})([0-9]{2})$/-\\1:\\2/\") -X github.com/zitadel/zitadel/cmd/build.version=${ZITADEL_VERSION}\"'",
                    "bash -c 'EXT=\"\"; if [ \"$GOOS\" = \"windows\" ]; then EXT=\".exe\"; fi; FOLDER=\".artifacts/pack/zitadel-$GOOS-$GOARCH\"; mkdir -p \"$FOLDER\"; cp \".artifacts/bin/$GOOS/$GOARCH/zitadel$EXT\" \"$FOLDER/\"; cp LICENSE \"$FOLDER/\"; cp README.md \"$FOLDER/\"; tar -czvf \"$FOLDER.tar.gz\" \"$FOLDER\"; rm -rf \"$FOLDER\"'"
                ]
            }
        },
        "pack-darwin-amd64": {
            "description": "Packages the API for Darwin AMD64 (Intel) architecture",
            "dependsOn": ["generate"],
            "command": "GOOS=darwin GOARCH=amd64 nx run @zitadel/api:pack-platform",
            "cache": true,
            "inputs": [
                "pack",
                { "env": "ZITADEL_VERSION" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/pack/zitadel-darwin-amd64.tar.gz",
                "{workspaceRoot}/.artifacts/bin/darwin/amd64/zitadel"
            ]
        },
        "pack-darwin-arm64": {
            "description": "Packages the API for Darwin ARM64 (Apple Silicon) architecture",
            "dependsOn": ["generate"],
            "command": "GOOS=darwin GOARCH=arm64 nx run @zitadel/api:pack-platform",
            "cache": true,
            "inputs": [
                "pack",
                { "env": "ZITADEL_VERSION" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/pack/zitadel-darwin-arm64.tar.gz",
                "{workspaceRoot}/.artifacts/bin/darwin/arm64/zitadel"
            ]
        },
        "pack-linux-amd64": {
            "description": "Packages the API for Linux AMD64 architecture",
            "dependsOn": ["generate"],
            "command": "GOOS=linux GOARCH=amd64 nx run @zitadel/api:pack-platform",
            "cache": true,
            "inputs": [
                "pack",
                { "env": "ZITADEL_VERSION" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/pack/zitadel-linux-amd64.tar.gz",
                "{workspaceRoot}/.artifacts/bin/linux/amd64/zitadel"
            ]
        },
        "pack-linux-arm64": {
            "description": "Packages the API for Linux ARM64 architecture",
            "dependsOn": ["generate"],
            "command": "GOOS=linux GOARCH=arm64 nx run @zitadel/api:pack-platform",
            "cache": true,
            "inputs": [
                "pack",
                { "env": "ZITADEL_VERSION" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/pack/zitadel-linux-arm64.tar.gz",
                "{workspaceRoot}/.artifacts/bin/linux/arm64/zitadel"
            ]
        },
        "pack-windows-amd64": {
            "description": "Packages the API for Windows AMD64 architecture",
            "dependsOn": ["generate"],
            "command": "GOOS=windows GOARCH=amd64 nx run @zitadel/api:pack-platform",
            "cache": true,
            "inputs": [
                "pack",
                { "env": "ZITADEL_VERSION" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/pack/zitadel-windows-amd64.tar.gz",
                "{workspaceRoot}/.artifacts/bin/windows/amd64/zitadel.exe"
            ]
        },
        "pack-windows-arm64": {
            "description": "Packages the API for Windows ARM64 architecture",
            "dependsOn": ["generate"],
            "command": "GOOS=windows GOARCH=arm64 nx run @zitadel/api:pack-platform",
            "cache": true,
            "inputs": [
                "pack",
                { "env": "ZITADEL_VERSION" }
            ],
            "outputs": [
                "{workspaceRoot}/.artifacts/pack/zitadel-windows-arm64.tar.gz",
                "{workspaceRoot}/.artifacts/bin/windows/arm64/zitadel.exe"
            ]
        }
    }
}