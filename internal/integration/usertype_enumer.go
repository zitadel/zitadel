// Code generated by "enumer -type UserType -transform snake -trimprefix UserType"; DO NOT EDIT.

package integration

import (
	"fmt"
	"strings"
)

const _UserTypeName = "unspecifiediam_ownerorg_ownerloginno_permission"

var _UserTypeIndex = [...]uint8{0, 11, 20, 29, 34, 47}

const _UserTypeLowerName = "unspecifiediam_ownerorg_ownerloginno_permission"

func (i UserType) String() string {
	if i < 0 || i >= UserType(len(_UserTypeIndex)-1) {
		return fmt.Sprintf("UserType(%d)", i)
	}
	return _UserTypeName[_UserTypeIndex[i]:_UserTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UserTypeNoOp() {
	var x [1]struct{}
	_ = x[UserTypeUnspecified-(0)]
	_ = x[UserTypeIAMOwner-(1)]
	_ = x[UserTypeOrgOwner-(2)]
	_ = x[UserTypeLogin-(3)]
	_ = x[UserTypeNoPermission-(4)]
}

var _UserTypeValues = []UserType{UserTypeUnspecified, UserTypeIAMOwner, UserTypeOrgOwner, UserTypeLogin, UserTypeNoPermission}

var _UserTypeNameToValueMap = map[string]UserType{
	_UserTypeName[0:11]:       UserTypeUnspecified,
	_UserTypeLowerName[0:11]:  UserTypeUnspecified,
	_UserTypeName[11:20]:      UserTypeIAMOwner,
	_UserTypeLowerName[11:20]: UserTypeIAMOwner,
	_UserTypeName[20:29]:      UserTypeOrgOwner,
	_UserTypeLowerName[20:29]: UserTypeOrgOwner,
	_UserTypeName[29:34]:      UserTypeLogin,
	_UserTypeLowerName[29:34]: UserTypeLogin,
	_UserTypeName[34:47]:      UserTypeNoPermission,
	_UserTypeLowerName[34:47]: UserTypeNoPermission,
}

var _UserTypeNames = []string{
	_UserTypeName[0:11],
	_UserTypeName[11:20],
	_UserTypeName[20:29],
	_UserTypeName[29:34],
	_UserTypeName[34:47],
}

// UserTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UserTypeString(s string) (UserType, error) {
	if val, ok := _UserTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UserTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UserType values", s)
}

// UserTypeValues returns all values of the enum
func UserTypeValues() []UserType {
	return _UserTypeValues
}

// UserTypeStrings returns a slice of all String values of the enum
func UserTypeStrings() []string {
	strs := make([]string, len(_UserTypeNames))
	copy(strs, _UserTypeNames)
	return strs
}

// IsAUserType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UserType) IsAUserType() bool {
	for _, v := range _UserTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
