// Code generated by "enumer -type MemberType -trimprefix MemberType -json -sql"; DO NOT EDIT.

package authz

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _MemberTypeName = "UnspecifiedOrganizationProjectProjectGrantIAMSystem"

var _MemberTypeIndex = [...]uint8{0, 11, 23, 30, 42, 45, 51}

const _MemberTypeLowerName = "unspecifiedorganizationprojectprojectgrantiamsystem"

func (i MemberType) String() string {
	if i < 0 || i >= MemberType(len(_MemberTypeIndex)-1) {
		return fmt.Sprintf("MemberType(%d)", i)
	}
	return _MemberTypeName[_MemberTypeIndex[i]:_MemberTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MemberTypeNoOp() {
	var x [1]struct{}
	_ = x[MemberTypeUnspecified-(0)]
	_ = x[MemberTypeOrganization-(1)]
	_ = x[MemberTypeProject-(2)]
	_ = x[MemberTypeProjectGrant-(3)]
	_ = x[MemberTypeIAM-(4)]
	_ = x[MemberTypeSystem-(5)]
}

var _MemberTypeValues = []MemberType{MemberTypeUnspecified, MemberTypeOrganization, MemberTypeProject, MemberTypeProjectGrant, MemberTypeIAM, MemberTypeSystem}

var _MemberTypeNameToValueMap = map[string]MemberType{
	_MemberTypeName[0:11]:       MemberTypeUnspecified,
	_MemberTypeLowerName[0:11]:  MemberTypeUnspecified,
	_MemberTypeName[11:23]:      MemberTypeOrganization,
	_MemberTypeLowerName[11:23]: MemberTypeOrganization,
	_MemberTypeName[23:30]:      MemberTypeProject,
	_MemberTypeLowerName[23:30]: MemberTypeProject,
	_MemberTypeName[30:42]:      MemberTypeProjectGrant,
	_MemberTypeLowerName[30:42]: MemberTypeProjectGrant,
	_MemberTypeName[42:45]:      MemberTypeIAM,
	_MemberTypeLowerName[42:45]: MemberTypeIAM,
	_MemberTypeName[45:51]:      MemberTypeSystem,
	_MemberTypeLowerName[45:51]: MemberTypeSystem,
}

var _MemberTypeNames = []string{
	_MemberTypeName[0:11],
	_MemberTypeName[11:23],
	_MemberTypeName[23:30],
	_MemberTypeName[30:42],
	_MemberTypeName[42:45],
	_MemberTypeName[45:51],
}

// MemberTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MemberTypeString(s string) (MemberType, error) {
	if val, ok := _MemberTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MemberTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MemberType values", s)
}

// MemberTypeValues returns all values of the enum
func MemberTypeValues() []MemberType {
	return _MemberTypeValues
}

// MemberTypeStrings returns a slice of all String values of the enum
func MemberTypeStrings() []string {
	strs := make([]string, len(_MemberTypeNames))
	copy(strs, _MemberTypeNames)
	return strs
}

// IsAMemberType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MemberType) IsAMemberType() bool {
	for _, v := range _MemberTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for MemberType
func (i MemberType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for MemberType
func (i *MemberType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MemberType should be a string, got %s", data)
	}

	var err error
	*i, err = MemberTypeString(s)
	return err
}

func (i MemberType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *MemberType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of MemberType: %[1]T(%[1]v)", value)
	}

	val, err := MemberTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
