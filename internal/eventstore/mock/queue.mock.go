// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/internal/eventstore (interfaces: ExecutionQueue)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./mock/queue.mock.go github.com/zitadel/zitadel/internal/eventstore ExecutionQueue
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	river "github.com/riverqueue/river"
	queue "github.com/zitadel/zitadel/internal/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutionQueue is a mock of ExecutionQueue interface.
type MockExecutionQueue struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionQueueMockRecorder
}

// MockExecutionQueueMockRecorder is the mock recorder for MockExecutionQueue.
type MockExecutionQueueMockRecorder struct {
	mock *MockExecutionQueue
}

// NewMockExecutionQueue creates a new mock instance.
func NewMockExecutionQueue(ctrl *gomock.Controller) *MockExecutionQueue {
	mock := &MockExecutionQueue{ctrl: ctrl}
	mock.recorder = &MockExecutionQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionQueue) EXPECT() *MockExecutionQueueMockRecorder {
	return m.recorder
}

// InsertManyFastTx mocks base method.
func (m *MockExecutionQueue) InsertManyFastTx(arg0 context.Context, arg1 *sql.Tx, arg2 []river.JobArgs, arg3 ...queue.InsertOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertManyFastTx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertManyFastTx indicates an expected call of InsertManyFastTx.
func (mr *MockExecutionQueueMockRecorder) InsertManyFastTx(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertManyFastTx", reflect.TypeOf((*MockExecutionQueue)(nil).InsertManyFastTx), varargs...)
}
