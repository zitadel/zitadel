// Code generated by "enumer -type SecretGeneratorType -transform snake -trimprefix SecretGeneratorType"; DO NOT EDIT.

package domain

import (
	"fmt"
)

const _SecretGeneratorTypeName = "unspecifiedinit_codeverify_email_codeverify_phone_codeverify_domainpassword_reset_codepasswordless_init_codeapp_secretotpsmsotp_emailinvite_codesecret_generator_type_count"

var _SecretGeneratorTypeIndex = [...]uint8{0, 11, 20, 37, 54, 67, 86, 108, 118, 124, 133, 144, 171}

func (i SecretGeneratorType) String() string {
	if i < 0 || i >= SecretGeneratorType(len(_SecretGeneratorTypeIndex)-1) {
		return fmt.Sprintf("SecretGeneratorType(%d)", i)
	}
	return _SecretGeneratorTypeName[_SecretGeneratorTypeIndex[i]:_SecretGeneratorTypeIndex[i+1]]
}

var _SecretGeneratorTypeValues = []SecretGeneratorType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}

var _SecretGeneratorTypeNameToValueMap = map[string]SecretGeneratorType{
	_SecretGeneratorTypeName[0:11]:    0,
	_SecretGeneratorTypeName[11:20]:   1,
	_SecretGeneratorTypeName[20:37]:   2,
	_SecretGeneratorTypeName[37:54]:   3,
	_SecretGeneratorTypeName[54:67]:   4,
	_SecretGeneratorTypeName[67:86]:   5,
	_SecretGeneratorTypeName[86:108]:  6,
	_SecretGeneratorTypeName[108:118]: 7,
	_SecretGeneratorTypeName[118:124]: 8,
	_SecretGeneratorTypeName[124:133]: 9,
	_SecretGeneratorTypeName[133:144]: 10,
	_SecretGeneratorTypeName[144:171]: 11,
}

// SecretGeneratorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SecretGeneratorTypeString(s string) (SecretGeneratorType, error) {
	if val, ok := _SecretGeneratorTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SecretGeneratorType values", s)
}

// SecretGeneratorTypeValues returns all values of the enum
func SecretGeneratorTypeValues() []SecretGeneratorType {
	return _SecretGeneratorTypeValues
}

// IsASecretGeneratorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SecretGeneratorType) IsASecretGeneratorType() bool {
	for _, v := range _SecretGeneratorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
