// Code generated by "enumer -type ImprovedPerformanceType -trimprefix ImprovedPerformanceType -text"; DO NOT EDIT.

package feature

import (
	"fmt"
	"strings"
)

const _ImprovedPerformanceTypeName = "UnspecifiedOrgByIDProjectGrantProjectUserGrantOrgDomainVerified"

var _ImprovedPerformanceTypeIndex = [...]uint8{0, 11, 18, 30, 37, 46, 63}

const _ImprovedPerformanceTypeLowerName = "unspecifiedorgbyidprojectgrantprojectusergrantorgdomainverified"

func (i ImprovedPerformanceType) String() string {
	if i < 0 || i >= ImprovedPerformanceType(len(_ImprovedPerformanceTypeIndex)-1) {
		return fmt.Sprintf("ImprovedPerformanceType(%d)", i)
	}
	return _ImprovedPerformanceTypeName[_ImprovedPerformanceTypeIndex[i]:_ImprovedPerformanceTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ImprovedPerformanceTypeNoOp() {
	var x [1]struct{}
	_ = x[ImprovedPerformanceTypeUnspecified-(0)]
	_ = x[ImprovedPerformanceTypeOrgByID-(1)]
	_ = x[ImprovedPerformanceTypeProjectGrant-(2)]
	_ = x[ImprovedPerformanceTypeProject-(3)]
	_ = x[ImprovedPerformanceTypeUserGrant-(4)]
	_ = x[ImprovedPerformanceTypeOrgDomainVerified-(5)]
}

var _ImprovedPerformanceTypeValues = []ImprovedPerformanceType{ImprovedPerformanceTypeUnspecified, ImprovedPerformanceTypeOrgByID, ImprovedPerformanceTypeProjectGrant, ImprovedPerformanceTypeProject, ImprovedPerformanceTypeUserGrant, ImprovedPerformanceTypeOrgDomainVerified}

var _ImprovedPerformanceTypeNameToValueMap = map[string]ImprovedPerformanceType{
	_ImprovedPerformanceTypeName[0:11]:       ImprovedPerformanceTypeUnspecified,
	_ImprovedPerformanceTypeLowerName[0:11]:  ImprovedPerformanceTypeUnspecified,
	_ImprovedPerformanceTypeName[11:18]:      ImprovedPerformanceTypeOrgByID,
	_ImprovedPerformanceTypeLowerName[11:18]: ImprovedPerformanceTypeOrgByID,
	_ImprovedPerformanceTypeName[18:30]:      ImprovedPerformanceTypeProjectGrant,
	_ImprovedPerformanceTypeLowerName[18:30]: ImprovedPerformanceTypeProjectGrant,
	_ImprovedPerformanceTypeName[30:37]:      ImprovedPerformanceTypeProject,
	_ImprovedPerformanceTypeLowerName[30:37]: ImprovedPerformanceTypeProject,
	_ImprovedPerformanceTypeName[37:46]:      ImprovedPerformanceTypeUserGrant,
	_ImprovedPerformanceTypeLowerName[37:46]: ImprovedPerformanceTypeUserGrant,
	_ImprovedPerformanceTypeName[46:63]:      ImprovedPerformanceTypeOrgDomainVerified,
	_ImprovedPerformanceTypeLowerName[46:63]: ImprovedPerformanceTypeOrgDomainVerified,
}

var _ImprovedPerformanceTypeNames = []string{
	_ImprovedPerformanceTypeName[0:11],
	_ImprovedPerformanceTypeName[11:18],
	_ImprovedPerformanceTypeName[18:30],
	_ImprovedPerformanceTypeName[30:37],
	_ImprovedPerformanceTypeName[37:46],
	_ImprovedPerformanceTypeName[46:63],
}

// ImprovedPerformanceTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ImprovedPerformanceTypeString(s string) (ImprovedPerformanceType, error) {
	if val, ok := _ImprovedPerformanceTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ImprovedPerformanceTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ImprovedPerformanceType values", s)
}

// ImprovedPerformanceTypeValues returns all values of the enum
func ImprovedPerformanceTypeValues() []ImprovedPerformanceType {
	return _ImprovedPerformanceTypeValues
}

// ImprovedPerformanceTypeStrings returns a slice of all String values of the enum
func ImprovedPerformanceTypeStrings() []string {
	strs := make([]string, len(_ImprovedPerformanceTypeNames))
	copy(strs, _ImprovedPerformanceTypeNames)
	return strs
}

// IsAImprovedPerformanceType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ImprovedPerformanceType) IsAImprovedPerformanceType() bool {
	for _, v := range _ImprovedPerformanceTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ImprovedPerformanceType
func (i ImprovedPerformanceType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ImprovedPerformanceType
func (i *ImprovedPerformanceType) UnmarshalText(text []byte) error {
	var err error
	*i, err = ImprovedPerformanceTypeString(string(text))
	return err
}
