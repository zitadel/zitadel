// Code generated by "enumer -type Key -transform snake -trimprefix Key"; DO NOT EDIT.

package feature

import (
	"fmt"
	"strings"
)

const _KeyName = "unspecifiedlogin_default_orgtrigger_introspection_projectionslegacy_introspectionuser_schematoken_exchangeactionsimproved_performanceweb_keydebug_oidc_parent_erroroidc_single_v1_session_terminationdisable_user_token_eventenable_back_channel_logout"

var _KeyIndex = [...]uint8{0, 11, 28, 61, 81, 92, 106, 113, 133, 140, 163, 197, 221, 247}

const _KeyLowerName = "unspecifiedlogin_default_orgtrigger_introspection_projectionslegacy_introspectionuser_schematoken_exchangeactionsimproved_performanceweb_keydebug_oidc_parent_erroroidc_single_v1_session_terminationdisable_user_token_eventenable_back_channel_logout"

func (i Key) String() string {
	if i < 0 || i >= Key(len(_KeyIndex)-1) {
		return fmt.Sprintf("Key(%d)", i)
	}
	return _KeyName[_KeyIndex[i]:_KeyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KeyNoOp() {
	var x [1]struct{}
	_ = x[KeyUnspecified-(0)]
	_ = x[KeyLoginDefaultOrg-(1)]
	_ = x[KeyTriggerIntrospectionProjections-(2)]
	_ = x[KeyLegacyIntrospection-(3)]
	_ = x[KeyUserSchema-(4)]
	_ = x[KeyTokenExchange-(5)]
	_ = x[KeyActions-(6)]
	_ = x[KeyImprovedPerformance-(7)]
	_ = x[KeyWebKey-(8)]
	_ = x[KeyDebugOIDCParentError-(9)]
	_ = x[KeyOIDCSingleV1SessionTermination-(10)]
	_ = x[KeyDisableUserTokenEvent-(11)]
	_ = x[KeyEnableBackChannelLogout-(12)]
}

var _KeyValues = []Key{KeyUnspecified, KeyLoginDefaultOrg, KeyTriggerIntrospectionProjections, KeyLegacyIntrospection, KeyUserSchema, KeyTokenExchange, KeyActions, KeyImprovedPerformance, KeyWebKey, KeyDebugOIDCParentError, KeyOIDCSingleV1SessionTermination, KeyDisableUserTokenEvent, KeyEnableBackChannelLogout}

var _KeyNameToValueMap = map[string]Key{
	_KeyName[0:11]:         KeyUnspecified,
	_KeyLowerName[0:11]:    KeyUnspecified,
	_KeyName[11:28]:        KeyLoginDefaultOrg,
	_KeyLowerName[11:28]:   KeyLoginDefaultOrg,
	_KeyName[28:61]:        KeyTriggerIntrospectionProjections,
	_KeyLowerName[28:61]:   KeyTriggerIntrospectionProjections,
	_KeyName[61:81]:        KeyLegacyIntrospection,
	_KeyLowerName[61:81]:   KeyLegacyIntrospection,
	_KeyName[81:92]:        KeyUserSchema,
	_KeyLowerName[81:92]:   KeyUserSchema,
	_KeyName[92:106]:       KeyTokenExchange,
	_KeyLowerName[92:106]:  KeyTokenExchange,
	_KeyName[106:113]:      KeyActions,
	_KeyLowerName[106:113]: KeyActions,
	_KeyName[113:133]:      KeyImprovedPerformance,
	_KeyLowerName[113:133]: KeyImprovedPerformance,
	_KeyName[133:140]:      KeyWebKey,
	_KeyLowerName[133:140]: KeyWebKey,
	_KeyName[140:163]:      KeyDebugOIDCParentError,
	_KeyLowerName[140:163]: KeyDebugOIDCParentError,
	_KeyName[163:197]:      KeyOIDCSingleV1SessionTermination,
	_KeyLowerName[163:197]: KeyOIDCSingleV1SessionTermination,
	_KeyName[197:221]:      KeyDisableUserTokenEvent,
	_KeyLowerName[197:221]: KeyDisableUserTokenEvent,
	_KeyName[221:247]:      KeyEnableBackChannelLogout,
	_KeyLowerName[221:247]: KeyEnableBackChannelLogout,
}

var _KeyNames = []string{
	_KeyName[0:11],
	_KeyName[11:28],
	_KeyName[28:61],
	_KeyName[61:81],
	_KeyName[81:92],
	_KeyName[92:106],
	_KeyName[106:113],
	_KeyName[113:133],
	_KeyName[133:140],
	_KeyName[140:163],
	_KeyName[163:197],
	_KeyName[197:221],
	_KeyName[221:247],
}

// KeyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KeyString(s string) (Key, error) {
	if val, ok := _KeyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KeyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Key values", s)
}

// KeyValues returns all values of the enum
func KeyValues() []Key {
	return _KeyValues
}

// KeyStrings returns a slice of all String values of the enum
func KeyStrings() []string {
	strs := make([]string, len(_KeyNames))
	copy(strs, _KeyNames)
	return strs
}

// IsAKey returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Key) IsAKey() bool {
	for _, v := range _KeyValues {
		if i == v {
			return true
		}
	}
	return false
}
