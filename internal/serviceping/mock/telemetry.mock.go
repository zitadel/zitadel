// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/pkg/grpc/analytics/v2beta (interfaces: TelemetryServiceClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination telemetry.mock.go github.com/zitadel/zitadel/pkg/grpc/analytics/v2beta TelemetryServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	analytics "github.com/zitadel/zitadel/pkg/grpc/analytics/v2beta"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTelemetryServiceClient is a mock of TelemetryServiceClient interface.
type MockTelemetryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryServiceClientMockRecorder
}

// MockTelemetryServiceClientMockRecorder is the mock recorder for MockTelemetryServiceClient.
type MockTelemetryServiceClientMockRecorder struct {
	mock *MockTelemetryServiceClient
}

// NewMockTelemetryServiceClient creates a new mock instance.
func NewMockTelemetryServiceClient(ctrl *gomock.Controller) *MockTelemetryServiceClient {
	mock := &MockTelemetryServiceClient{ctrl: ctrl}
	mock.recorder = &MockTelemetryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryServiceClient) EXPECT() *MockTelemetryServiceClientMockRecorder {
	return m.recorder
}

// ReportBaseInformation mocks base method.
func (m *MockTelemetryServiceClient) ReportBaseInformation(arg0 context.Context, arg1 *analytics.ReportBaseInformationRequest, arg2 ...grpc.CallOption) (*analytics.ReportBaseInformationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportBaseInformation", varargs...)
	ret0, _ := ret[0].(*analytics.ReportBaseInformationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportBaseInformation indicates an expected call of ReportBaseInformation.
func (mr *MockTelemetryServiceClientMockRecorder) ReportBaseInformation(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportBaseInformation", reflect.TypeOf((*MockTelemetryServiceClient)(nil).ReportBaseInformation), varargs...)
}

// ReportResourceCounts mocks base method.
func (m *MockTelemetryServiceClient) ReportResourceCounts(arg0 context.Context, arg1 *analytics.ReportResourceCountsRequest, arg2 ...grpc.CallOption) (*analytics.ReportResourceCountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReportResourceCounts", varargs...)
	ret0, _ := ret[0].(*analytics.ReportResourceCountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportResourceCounts indicates an expected call of ReportResourceCounts.
func (mr *MockTelemetryServiceClientMockRecorder) ReportResourceCounts(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportResourceCounts", reflect.TypeOf((*MockTelemetryServiceClient)(nil).ReportResourceCounts), varargs...)
}
