// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/internal/notification/senders (interfaces: CodeGenerator)
//
// Generated by this command:
//
//	mockgen -package mock -destination ./mock/code_generator.mock.go github.com/zitadel/zitadel/internal/notification/senders CodeGenerator
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCodeGenerator is a mock of CodeGenerator interface.
type MockCodeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGeneratorMockRecorder
}

// MockCodeGeneratorMockRecorder is the mock recorder for MockCodeGenerator.
type MockCodeGeneratorMockRecorder struct {
	mock *MockCodeGenerator
}

// NewMockCodeGenerator creates a new mock instance.
func NewMockCodeGenerator(ctrl *gomock.Controller) *MockCodeGenerator {
	mock := &MockCodeGenerator{ctrl: ctrl}
	mock.recorder = &MockCodeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeGenerator) EXPECT() *MockCodeGeneratorMockRecorder {
	return m.recorder
}

// VerifyCode mocks base method.
func (m *MockCodeGenerator) VerifyCode(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCode indicates an expected call of VerifyCode.
func (mr *MockCodeGeneratorMockRecorder) VerifyCode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCode", reflect.TypeOf((*MockCodeGenerator)(nil).VerifyCode), arg0, arg1)
}
